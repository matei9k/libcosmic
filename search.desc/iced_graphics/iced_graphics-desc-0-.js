searchState.loadedDescShard("iced_graphics", 0, "A bunch of backend-agnostic types that can be leveraged to …\nAn antialiasing strategy.\nAn error occured in the context’s internal backend\nA cached primitive.\nA clip primitive\nA backend-specific primitive.\nAn editor primitive\nAn error that occurred while creating an application’s …\nA suitable graphics adapter or device could not be found.\nA group of primitives\nAn image primitive\nMultisample AA with 16 samples\nMultisample AA with 2 samples\nMultisample AA with 4 samples\nMultisample AA with 8 samples\nFailed to find any pixel format that matches the criteria.\nA paragraph primitive\nA rendering primitive.\nA quad primitive\nA raw <code>cosmic-text</code> primitive\nAn SVG primitive\nA text primitive\nA 2D transformation matrix.\nA primitive that applies a translation\nThe requested backend version is not supported.\nA viewing region for displaying computer graphics.\nWrite a graphics backend.\nCreates a <code>Primitive::Clip</code>.\nManage colors for shaders.\nA compositor is responsible for initializing a renderer …\nTrack and compute the damage of graphical primitives.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBuild and draw geometry.\nA gradient that can be used as a fill for some geometry.\nCreates a <code>Primitive::Group</code>.\nGet the identity transformation.\nLoad and operate on images.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the logical size of the <code>Viewport</code>.\nDraw triangles!\nCreates an orthographic projection.\nReturns the physical height of the <code>Viewport</code>.\nReturns the physical size of the <code>Viewport</code>.\nReturns the physical width of the <code>Viewport</code>.\nReturns the projection transformation of the <code>Viewport</code>.\nCreate a renderer from a <code>Backend</code>.\nReturns the amount of samples of the <code>Antialiasing</code>.\nCreates a scale transformation.\nReturns the scale factor of the <code>Viewport</code>.\nDraw text.\nCreates a <code>Primitive::Translate</code>.\nCreates a translate transformation.\nCreates a new <code>Viewport</code> with the given logical dimensions …\nCreates a new <code>Viewport</code> with the given physical dimensions …\nThe background of the quad\nThe <code>Border</code> of the quad\nThe border radii of the image\nThe bounds of the text.\nThe bounds of the quad\nThe bounds of the image\nThe bounds of the viewport\nThe bounds of the clip\nThe clip bounds of the text.\nThe clip bounds of the paragraph.\nThe clip bounds of the editor.\nThe color of the text.\nThe color of the paragraph.\nThe color of the editor.\nThe <code>Color</code> filter\nThe contents of the text.\nThe content of the clip\nThe primitive to translate\nThe cached primitive\nThe <code>editor::Weak</code> reference.\nThe filter method of the image\nThe font of the text.\nThe handle of the image\nThe path of the SVG file\nThe horizontal alignment of the text.\nThe line height of the text.\nThe <code>paragraph::Weak</code> reference.\nThe position of the paragraph.\nThe position of the editor.\nThe primitives of the group\nThe <code>Shadow</code> of the quad\nThe shaping strategy of the text.\nThe size of the text in logical pixels.\nThe translation vector\nThe vertical alignment of the text.\nThe graphics backend of a <code>Renderer</code>.\nA graphics backend that supports image rendering.\nThe custom kind of primitives this <code>Backend</code> supports.\nA graphics backend that supports SVG rendering.\nA graphics backend that supports text rendering.\nReturns the dimensions of the provided image.\nLoads a font from its bytes.\nReturns the viewport dimensions of the provided SVG.\nA flag that indicates whether the renderer should perform …\nA color packed as 4 floats representing RGBA channels.\nReturns the internal components of the <code>Packed</code> color.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPacks a <code>Color</code>.\nA graphics compositor that can draw to windows.\nContains information about the graphics (e.g. graphics …\nInvalid dimensions\nThe swap chain has been lost and needs to be recreated.\nThere is no more memory left to allocate a new frame.\nThe underlying surface has changed, and therefore the …\nPresent Error\nThe iced renderer of the backend.\nResize Error\nThe settings of the backend.\nThe surface of the backend.\nResult of an unsuccessful call to <code>Compositor::present</code>.\nA timeout was encountered while trying to acquire the next …\nA window that can be used in a <code>Compositor</code>.\nContains the graphics adapter.\nContains the graphics backend.\nConfigures a new <code>Surface</code> with the given dimensions.\nCreates a <code>Self::Renderer</code> for the <code>Compositor</code>.\nCrates a new <code>Surface</code> for the given window.\nReturns <code>Information</code> used by this <code>Compositor</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>Compositor</code>.\nPresents the <code>Renderer</code> primitives to the next frame of the …\nScreenshots the current <code>Renderer</code> primitives to an …\nA type that has some damage bounds.\nReturns the bounds of the <code>Damage</code>.\nGroups the given damage regions that are close together …\nComputes the damage regions between the two given lists of …\nThe kind of geometry this renderer can draw.\nA <code>Gradient</code> color.\nA renderer capable of drawing some <code>Self::Geometry</code>.\nA solid <code>Color</code>.\nThe coloring style of some drawing.\nA bunch of text that can be drawn to a canvas\nThe color of the text\nThe contents of the text\nDraws the given layers of <code>Self::Geometry</code>.\nComputes the <code>Path</code>s of the <code>Text</code> and draws them using the …\nFill <code>Geometry</code> with a certain style.\nThe font of the text\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe horizontal alignment of the text\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe line height of the text.\nBuild different kinds of 2D shapes.\nThe position of the text relative to the alignment …\nThe shaping strategy of the text.\nThe size of the text\nCreate lines from a <code>Path</code> and assigns them various …\nThe vertical alignment of the text\nThe style used to fill geometry.\nThe fill rule defines how to determine what is inside and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe fill rule defines how to determine what is inside and …\nThe color or gradient of the fill.\nA <code>Path</code> builder.\nAn immutable set of points that may or may not be …\nBuild and draw curves.\nAdds an <code>Arc</code> to the <code>Path</code> from <code>start_angle</code> to <code>end_angle</code> in a …\nAdds a circular arc to the <code>Path</code> with the given control …\nAdds a cubic Bézier curve to the <code>Path</code> given its two …\nBuilds the <code>Path</code> of this <code>Builder</code>.\nAdds a circle to the <code>Path</code> given its center coordinate and …\nCreates a new <code>Path</code> representing a circle given its center …\nCloses the current sub-path in the <code>Path</code> with a straight …\nAdds an ellipse to the <code>Path</code> using a clockwise direction.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>Path</code> representing a line segment given its …\nConnects the last point in the <code>Path</code> to the given <code>Point</code> …\nMoves the starting point of a new sub-path to the given …\nCreates a new <code>Builder</code>.\nCreates a new <code>Path</code> with the provided closure.\nAdds a quadratic Bézier curve to the <code>Path</code> given its …\nReturns the internal <code>lyon_path::Path</code>.\nAdds a rectangle to the <code>Path</code> given its top-left corner …\nCreates a new <code>Path</code> representing a rectangle given its …\nReturns the current <code>Path</code> with the given transform applied …\nA segment of a differentiable curve.\nAn elliptical <code>Arc</code>.\nThe center of the arc.\nThe center of the arc.\nThe end of the segment’s angle in radians, clockwise …\nThe end of the segment’s angle in radians, clockwise …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe radii of the arc’s ellipse. The horizontal and …\nThe radius of the arc.\nThe clockwise rotation of the arc’s ellipse.\nThe start of the segment’s angle in radians, clockwise …\nThe start of the segment’s angle in radians, clockwise …\nA bevelled corner.\nThe stroke for each sub-path does not extend beyond its …\nThe shape used at the end of open subpaths when they are …\nThe dash pattern used when stroking the line.\nThe shape used at the corners of paths or basic shapes …\nA sharp corner.\nAt the end of each sub-path, the shape representing the …\nA round corner.\nAt the end of each sub-path, the shape representing the …\nThe style of a stroke.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe shape to be used at the end of open subpaths when they …\nThe dash pattern used when stroking the line.\nThe shape to be used at the corners of paths or basic …\nThe offset of <code>LineDash::segments</code> to start the pattern.\nThe alternating lengths of lines and gaps which describe …\nThe color or gradient of the stroke.\nThe distance between the two edges of the stroke.\nSets the color of the <code>Stroke</code>.\nSets the <code>LineCap</code> of the <code>Stroke</code>.\nSets the <code>LineJoin</code> of the <code>Stroke</code>.\nSets the width of the <code>Stroke</code>.\nA fill which linearly interpolates colors along a …\nA linear gradient.\nA linear gradient interpolates colors along a direction …\nPacked <code>Gradient</code> data for use in shader code.\nAdds a new <code>ColorStop</code>, defined by an offset and a color, to …\nAdds multiple <code>ColorStop</code>s to the gradient.\nThe absolute ending position of the gradient.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>Linear</code> builder.\nCreates a new <code>Packed</code> gradient for use in shader code.\nPacks the <code>Gradient</code> for use in shader code.\nPacks the <code>Gradient</code> for use in shader code.\nThe absolute starting position of the gradient.\n<code>ColorStop</code>s along the linear gradient direction.\nTries to load an image by its <code>Handle</code>.\nA mesh with a gradient.\nA vertex which contains 2D position &amp; packed gradient data.\nA set of vertices and indices representing a list of …\nA low-level primitive to render a mesh of triangles.\nA mesh with a solid color.\nA two-dimensional vertex with a color.\nThe color of the vertex in <strong>linear</strong> RGBA.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe packed vertex data of the gradient.\nThe list of vertex indices that defines the triangles of …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe vertex position in 2D space.\nThe vertex position in 2D space.\nThe vertices of the mesh\nThe vertices and indices of the mesh.\nThe vertices and indices of the mesh.\nThe size of the drawable region of the mesh.\nThe size of the drawable region of the mesh.\nA backend-agnostic renderer that supports all the built-in …\nReturns a reference to the <code>Backend</code> of the <code>Renderer</code>.\nEnqueues the given <code>Primitive</code> in the <code>Renderer</code> for drawing.\nEnds the recording of a layer.\nEnds the recording of a translation.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new <code>Renderer</code> from the given <code>Backend</code>.\nStarts recording a new layer.\nStarts recording a translation.\nRuns the given closure with the <code>Backend</code> and the recorded …\nA set of system fonts.\nA weak reference to a [<code>cosmic-text::Buffer</code>] that can be …\nA version number.\nA weak reference to a <code>cosmic_text::Buffer</code>.\nCache text.\nThe clip bounds of the text.\nThe color of the text.\nDraw and edit text.\nReturns the global <code>FontSystem</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoads a font from its bytes.\nMeasures the dimensions of the given <code>cosmic_text::Buffer</code>.\nDraw paragraphs.\nThe position of the text.\nReturns the raw <code>cosmic_text::FontSystem</code>.\nReturns the attributes of the given <code>Font</code>.\nConverts some <code>Color</code> to a <code>cosmic_text::Color</code>.\nConverts some <code>Shaping</code> strategy to a <code>cosmic_text::Shaping</code> …\nConverts some <code>Wrap</code> mode to a <code>cosmic_text::Wrap</code> strategy.\nReturns the current <code>Version</code> of the <code>FontSystem</code>.\nA store of recently used sections of text.\nA cache entry.\nA cache key representing a section of text.\nThe hash of a <code>Key</code>.\nAllocates a text <code>Entry</code> if it is not already present in the …\nThe bounds of the text.\nThe buffer of text, ready for drawing.\nThe content of the text.\nThe <code>Font</code> of the text.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the text <code>Entry</code> with the given <code>KeyHash</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe line height of the text.\nThe minimum bounds of the text.\nCreates a new empty <code>Cache</code>.\nThe shaping strategy of the text.\nThe size of the text.\nTrims the <code>Cache</code>.\nA multi-line text editor.\nA weak reference to an <code>Editor</code>.\nThe bounds of the <code>Editor</code>.\nReturns the buffer of the <code>Paragraph</code>.\nCreates a <code>Weak</code> reference to the <code>Editor</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new empty <code>Editor</code>.\nTries to update the reference into an <code>Editor</code>.\nRuns a closure with the buffer of the <code>Editor</code>.\nA bunch of text.\nA weak reference to a <code>Paragraph</code>.\nReturns the buffer of the <code>Paragraph</code>.\nCreates a <code>Weak</code> reference to the <code>Paragraph</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe horizontal alignment of the <code>Paragraph</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe minimum bounds of the <code>Paragraph</code>.\nCreates a new empty <code>Paragraph</code>.\nTries to update the reference into a <code>Paragraph</code>.\nThe vertical alignment of the <code>Paragraph</code>.")