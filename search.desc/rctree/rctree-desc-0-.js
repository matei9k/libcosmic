searchState.loadedDescShard("rctree", 0, "<em>rctree</em> is a “DOM-like” tree implemented using …\nAn iterator of nodes to the ancestors a given node.\nA double ended iterator of nodes to the children of a …\nAn iterator of nodes to a given node and its descendants, …\nIndicates that end of a node that has children. Yielded by …\nAn iterator of nodes to the siblings after a given node.\nA reference to a node holding a value of type <code>T</code>. Nodes …\nA node type during traverse.\nAn iterator of nodes to the siblings before a given node.\nIndicates that start of a node that has children. Yielded …\nA double ended iterator of nodes to a given node and its …\nA weak reference to a node holding a value of type <code>T</code>.\nReturns an iterator of nodes to this node and its …\nAppends a new child to this node, after existing children.\nReturns a shared reference to this node’s data\nReturns a unique/mutable reference to this node’s data\nReturns an iterator of nodes to this node’s children.\nReturns an iterator of nodes to this node and its …\nDetaches a node from its parent and siblings. Children are …\nReturns a weak referece to a node.\nReturns a first child of this node, unless it has no child.\nReturns an iterator of nodes to this node and the siblings …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns <code>true</code> if this node has children nodes.\nInserts a new sibling after this node.\nInserts a new sibling before this node.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIterators prelude.\nReturns a last child of this node, unless it has no child.\nReturns a copy of a current node without children.\nReturns a copy of a current node with children.\nCreates a new node from its associated data.\nPanics\nPanics\nPanics\nPanics\nPanics\nPanics\nPanics\nPanics\nReturns the next sibling of this node, unless it is a last …\nReturns a parent node, unless this node is the root of the …\nReturns an iterator of nodes to this node and the siblings …\nPrepends a new child to this node, before existing …\nReturns the previous sibling of this node, unless it is a …\nReturns an iterator of nodes to this node and its …\nAttempts to upgrade the WeakNode to a Node.")