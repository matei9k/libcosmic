searchState.loadedDescShard("iced", 1, "Returns the ArrayVec, replacing the original with a new …\nShortens the vector, keeping the first <code>len</code> elements and …\nShortens this <code>ArrayString</code> to the specified length.\nCopy all elements from the slice and append to the <code>ArrayVec</code>…\nInsert <code>element</code> at position <code>index</code>.\nPush <code>element</code> to the end of the vector.\nAdds the given char to the end of the string.\nAdds the given string slice to the end of the string.\nCreate a new <code>ArrayString</code> value fully filled with ASCII …\nA 2d curve segment defined by four points: the beginning …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAn angle in radians\nA 2d vector of booleans, useful for component-wise logic …\nA 3d vector of booleans, useful for component-wise logic …\nA 2d axis aligned rectangle represented by its minimum and …\nAn axis aligned 3D box represented by its minimum and …\nHomogeneous vector in 3D space.\nA one-dimensional distance, with value represented by <code>T</code> …\nA 2d Point tagged with a unit.\nA 3d Point tagged with a unit.\nA 2d Rectangle optionally tagged with a unit.\nA rigid transformation. All lengths are preserved under …\nA transform that can represent rotations in 2d, …\nA transform that can represent rotations in 3d, …\nA scaling factor between two different units of …\nA group of 2D side offsets, which correspond to …\nA 2d size tagged with a unit.\nA 3d size tagged with a unit.\nA 2d transform represented by a column-major 3 by 3 …\nA 3d transform stored as a column-major 4 by 4 matrix.\nA 2d transformation from a space to another that can only …\nA 3d transformation from a space to another that can only …\nTrait for basic trigonometry functions, so they can be …\nThe default unit.\nA 2d Vector tagged with a unit.\nA 3d Vector tagged with a unit.\nComputes the absolute value of each component.\nComputes the absolute value of each component.\nComputes the vector with absolute values of each component.\nComputes the vector with absolute values of each component.\nReturns <code>true</code> if all components are <code>true</code> and <code>false</code> …\nReturns <code>true</code> if all components are <code>true</code> and <code>false</code> …\nReturns new vector with by-component AND operation applied.\nReturns new vector with by-component AND operation applied.\nAngle in radians\nReturns the signed angle between this vector and the x …\nReturns the signed angle between this vector and another …\nReturns the positive angle between this vector and another …\nReturns <code>true</code> if any component are <code>true</code> and <code>false</code> otherwise.\nReturns <code>true</code> if any component are <code>true</code> and <code>false</code> otherwise.\nReturns true is this transform is approximately equal to …\nReturns true is this transform is approximately equal to …\nReturns true is this transform is approximately equal to …\nReturns true is this transform is approximately equal to …\nReturns true is this transform is approximately equal to …\nUtilities for testing approximate ordering - especially …\nReturns result of multiplication of both components\nCreates a rotation around a given axis.\nCreates a rotation around the x axis.\nCreates a rotation around the y axis.\nCreates a rotation around the z axis.\nShorthand for …\nShorthand for <code>BoolVector2D { x, y }</code>.\nShorthand for <code>BoolVector3D { x, y, z }</code>.\nCast from one numeric representation to another, …\nCast from one numeric representation to another, …\nCast from one numeric representation to another, …\nCast from one numeric representation to another, …\nCast from one numeric representation to another, …\nCast from one numeric representation to another, …\nCast from one numeric representation to another, …\nCast from one numeric representation to another, …\nCast from one numeric representation to another, …\nCast from one numeric representation to another, …\nCast from one numeric representation to another, …\nCast from one numeric representation to another, …\nCast from one numeric representation to another, …\nCast from one numeric representation to another, …\nCast from one numeric representation to another, …\nCast the unit\nCast the unit\nCast the unit\nCast the unit, preserving the numeric value.\nCast the unit, preserving the numeric value.\nCast the unit\nCast the unit, preserving the numeric value.\nCast the unit, preserving the numeric value.\nCast the unit\nCast the unit\nCast the unit.\nCast the unit.\nRounds each component to the smallest integer equal or …\nSee Point2D::ceil()\nSee Point3D::ceil()\nRounds each component to the smallest integer equal or …\nSee <code>Size2D::ceil()</code>.\nRounds each component to the smallest integer equal or …\nSee <code>Size3D::ceil()</code>.\nRounds each component to the smallest integer equal or …\nSee <code>Vector2D::ceil()</code>\nRounds each component to the smallest integer equal or …\nSee <code>Vector3D::ceil()</code>\nRounds each component to the smallest integer equal or …\nReturns the point each component of which clamped by …\nReturns the point each component of which clamped by …\nReturns the point each component of which clamped by …\nReturns the size each component of which clamped by …\nReturns the size each component of which clamped by …\nReturns the vector each component of which is clamped by …\nReturns the vector each component of which is clamped by …\nReturn this vector with minimum and maximum lengths …\nReturn this vector with minimum and maximum lengths …\nReturns the component-wise division of the two vectors.\nReturns the component-wise division of the two vectors.\nReturns the component-wise multiplication of the two …\nReturns the component-wise multiplication of the two …\nReturns <code>true</code> if this box2d contains the point <code>p</code>. A point …\nReturns <code>true</code> if this box3d contains the point <code>p</code>. A point …\nReturns true if this rectangle contains the point. Points …\nReturns <code>true</code> if this box contains the interior of the …\nReturns <code>true</code> if this box3d contains the interior of the …\nReturns <code>true</code> if this box contains the point <code>p</code>. A point is …\nReturns <code>true</code> if this box3d contains the point <code>p</code>. A point …\nReturns true if this rectangle contains the interior of …\nReturns the norm of the cross product [self.x, self.y, 0] …\nCross product.\nDecompose this into a translation and an rotation to be …\nA set of aliases for all types, tagged with the default …\nReturns the identity transform.\nReturns the identity transform.\nThe extent of the element in the <code>U</code> units along the <code>z</code> axis.\nComputes and returns the determinant of this transform.\nCompute the determinant of the transform.\nCalculates Euclidean division, the matching method for …\nCalculates Euclidean division, the matching method for …\nDot product.\nDot product.\nReturns vector with results of “equal” operation on …\nReturns vector with results of “equal” operation on …\nReturns vector with results of “equal” operation on …\nReturns vector with results of “equal” operation on …\nCreates a rotation from Euler angles.\nCreate a 3d point from this one, using the specified z …\nCreate a 3d vector from this one, using the specified z …\nRounds each component to the biggest integer equal or …\nSee Point2D::floor()\nRounds each component to the biggest integer equal or …\nSee Point3D::floor()\nRounds each component to the biggest integer equal or …\nSee <code>Size2D::floor()</code>.\nRounds each component to the biggest integer equal or …\nSee <code>Size3D::floor()</code>.\nRounds each component to the biggest integer equal or …\nSee <code>Vector2D::floor()</code>\nSee <code>Vector3D::floor()</code>\nRounds each component to the biggest integer equal or …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructor taking angle and length\nCreate a transform providing its components via an array …\nCreate a transform providing its components via an array …\nEquivalent to <code>from_array</code> with elements packed two at a time\nEquivalent to <code>from_array</code> with elements packed four at a …\nConstructor setting the same value to all sides, taking a …\nConstructor taking properly Lengths instead of scalar …\nConstructor taking properly Lengths instead of scalar …\nConstructor taking a typed Length for each side.\nConstructor taking scalar strongly typed lengths.\nConstructor taking scalar strongly typed lengths.\nConstructor taking properly  Lengths instead of scalar …\nConstructor taking properly  Lengths instead of scalar …\nConstructor.\nConstructor.\nReturns the smallest box containing all of the provided …\nReturns the smallest box containing all of the provided …\nReturns the smallest rectangle defined by the …\nConvenience function to create a scale transform from a …\nCreates a Box2D of the given size, at offset zero.\nCreates a Box3D of the given size, at offset zero.\nCreates a rect of the given size, at offset zero.\nTag a unitless value with units.\nTag a unitless value with units.\nTag a unitless value with units.\nTag a unitless value with units.\nTag a unitless value with units.\nTag a unitless value with units.\nTag a unitless value with units.\nTag a unitless value with units.\nTag a unitless value with units.\nTag a unitless value with units.\nTag a unitless value with units.\nTag a unitless value with units.\nTag a unit-less value with units.\nTag a unitless value with units.\nTag a unitless value with units.\nTag a unitless value with units.\nConstruct side offsets from min and a max vector offsets.\nConstruct side offsets from min and a max vector offsets.\nUnpack the underlying value from the wrapper.\nReturns the underlying scalar scale factor.\nReturns self.angle as a strongly typed <code>Angle&lt;T&gt;</code>.\nReturns vector with results of “greater then” …\nReturns vector with results of “greater than” …\nReturns vector with results of “greater than” …\nReturns vector with results of “greater than” …\nThe extent of the element in the <code>U</code> units along the <code>y</code> axis …\nThe extent of the element in the <code>U</code> units along the <code>y</code> axis.\nComponent multiplied by the imaginary number <code>i</code>.\nConstruct an identity transform\nCreates the identity rotation.\nCreates the identity rotation.\nCreates an identity scale (1.0).\nCreates no-op translation (both <code>x</code> and <code>y</code> is <code>zero()</code>).\nCreates no-op translation (<code>x</code>, <code>y</code> and <code>z</code> is <code>zero()</code>).\nCreate an identity matrix:\nCreates an identity matrix:\nInflates the box by the specified sizes on each side …\nInflates the box by the specified sizes on each side …\nCalculate the size and position of an inner box.\nCalculate the size and position of an inner rectangle.\nComputes the intersection of two boxes, returning <code>None</code> if …\nComputes the intersection of two boxes without check …\nReturns <code>true</code> if the two boxes intersect.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInverts the transformation\nReturns the inverse of this rotation.\nReturns the inverse of this rotation.\nThe inverse Scale (1.0 / self).\nReturn the inverse transformation.\nReturn the inverse transformation.\nReturns the inverse transform if possible.\nReturns the inverse transform if possible.\nReturns <code>true</code> if this transform can be represented with a …\nCheck whether shapes on the XY plane with Z pointing …\nReturns true if the size is zero, negative or NaN.\nReturns true if the size is zero, negative or NaN.\nReturns <code>true</code> if any component of size is zero, negative, …\nReturns <code>true</code> if any component of size is zero, negative or …\nReturns true if all members are finite.\nReturns true if all members are finite.\nReturns true if all members are finite.\nReturns true if all members are finite.\nReturns true if all members are finite.\nReturns true if all members are finite.\nReturns true if all members are finite.\nReturns true if all members are finite.\nReturns true if all members are finite.\nReturns <code>true</code> if this scale has no effect.\nCheck if translation does nothing (both x and y is <code>zero()</code>).\nCheck if translation does nothing (<code>x</code>, <code>y</code> and <code>z</code> is <code>zero()</code>).\nReturns whether it is possible to compute the inverse …\nReturns whether it is possible to compute the inverse …\nReturns true if the box has a negative area.\nReturns true if the box has a negative volume.\nReturns <code>true</code> if norm of this quaternion is (approximately) …\nReturns <code>true</code> if both components is positive and <code>false</code> any …\nReturns <code>true</code> if all components is positive and <code>false</code> any …\nReturns <code>true</code> if all side offsets are zero.\nComponent multiplied by the imaginary number <code>j</code>.\nComponent multiplied by the imaginary number <code>k</code>.\nReturns the vector length.\nReturns the vector length.\nLinearly interpolate between this box and another box.\nLinearly interpolate between this box3d and another box3d.\nLinearly interpolate between this length and another …\nLinearly interpolate between this point and another point.\nLinearly interpolate between this point and another point.\nLinearly interpolate between this rectangle and another …\nBasic Linear interpolation between this rotation and …\nLinearly interpolate each component between this size and …\nLinearly interpolate between this size and another size.\nLinearly interpolate each component between this vector …\nLinearly interpolate each component between this vector …\nReturns vector with results of “lower then” operation …\nReturns vector with results of “lower than” operation …\nReturns vector with results of “lower than” operation …\nReturns vector with results of “lower than” operation …\nApply the function <code>f</code> to each component of this point.\nApply the function <code>f</code> to each component of this point.\nApply the function <code>f</code> to each component of this vector.\nApply the function <code>f</code> to each component of this vector.\nReturns maximum between this length and another length.\nReturns the size each component of which are maximum of …\nReturns the size each component of which are maximum of …\nReturns the vector each component of which are maximum of …\nReturns the vector each component of which are maximum of …\nReturns minimum between this length and another length.\nReturns the size each component of which are minimum of …\nReturns the size each component of which are minimum of …\nReturns the vector each component of which are minimum of …\nReturns the vector each component of which are minimum of …\nMultiplies all of the transform’s component by a scalar …\nConstructor.\nConstructor.\nConstructor taking scalar values directly.\nAssociate a value with a unit of measure.\nConstructor taking scalar values directly.\nConstructor taking scalar values directly.\nConstructor.\nConstruct a new rigid transformation, where the <code>rotation</code> …\nCreates a rotation from an angle in radians.\nConstructor taking a scalar for each side.\nConstructor taking scalar values.\nConstructor taking scalar values.\nConstructor taking scalar values directly.\nConstructor taking scalar values directly.\nCreate a transform specifying its components in using the …\nCreate a transform specifying all of it’s component as a …\nCreate a transform representing a 2d transformation from …\nConstructor setting the same value to all sides, taking a …\nConstruct a new rigid transformation, where the <code>translation</code>…\nReturns <code>true</code> if all components are <code>false</code> and <code>false</code> …\nReturns <code>true</code> if all components are <code>false</code> and <code>false</code> …\nComputes the norm of this quaternion.\nReturns a unit quaternion from this one.\nReturns the vector with length of one unit.\nReturns the vector with length of one unit\nReturns new vector with results of negation operation on …\nReturns new vector with results of negation operation on …\nReturns vector with results of “not equal” operation …\nReturns vector with results of “not equal” operation …\nReturns vector with results of “not equal” operation …\nReturns vector with results of “not equal” operation …\nA one-dimensional length, tagged with its units.\nConstructor, setting all components to one.\nConstructor, setting all components to one.\nReturns new vector with by-component OR operation applied.\nReturns new vector with by-component OR operation applied.\nConstructor, setting all components to zero.\nConstructor, setting all components to zero.\nCreate an orthogonal projection transform.\nCalculate the b and position of an outer box.\nCalculate the size and position of an outer rectangle.\nReturns a box that encompasses the result of transforming …\nReturns a 2d box that encompasses the result of …\nReturns a 3d box that encompasses the result of …\nReturns a rectangle that encompasses the result of …\nReturns a rectangle that encompasses the result of …\nCreate a simple perspective transform, projecting to the …\nShorthand for <code>Point2D::new(x, y)</code>.\nShorthand for <code>Point3D::new(x, y)</code>.\nApplies a rotation before self’s transformation and …\nReturns a transform with a rotation applied before self’…\nApplies a scale before self’s transformation and returns …\nReturns a transform with a scale applied before self’s …\nApplies a translation before self’s transformation and …\nReturns a transform with a translation applied before self…\nReturns this vector projected onto another one.\nReturns this vector projected onto another one.\nReturns a projection of this transform in 2d space.\nCreates a rotation around from a quaternion representation.\nThe real part.\nCreates a rotation from an angle in radians.\nShorthand for …\nReturns a reflection vector using an incident ray and a …\nReturns a reflection vector using an incident ray and a …\nCalculates the least nonnegative remainder of …\nCalculates the least nonnegative remainder of …\nReturn the normalized vector even if the length is larger …\nReturn the normalized vector even if the length is larger …\nReturns a rotation transform.\nCreate a 3d rotation transform from an angle / axis. The …\nReturn a box with edges rounded to integer coordinates, …\nReturn a box3d with edges rounded to integer coordinates, …\nSee Point2D::round()\nRounds each component to the nearest integer value.\nSee Point3D::round()\nRounds each component to the nearest integer value.\nReturn a rectangle with edges rounded to integer …\nRounds each component to the nearest integer value.\nSee <code>Size2D::round()</code>.\nRounds each component to the nearest integer value.\nSee <code>Size3D::round()</code>.\nRounds each component to the nearest integer value.\nSee <code>Vector2D::round()</code>\nRounds each component to the nearest integer value.\nSee <code>Vector3D::round()</code>\nReturn a box with faces/edges rounded to integer …\nReturn a box3d with faces/edges rounded to integer …\nReturn a rectangle with edges rounded to integer …\nReturn a box with faces/edges rounded to integer …\nReturn a box3d with faces/edges rounded to integer …\nReturn a rectangle with edges rounded to integer …\nCreate a 2d scale transform:\nCreate a 3d scale transform:\nReturns point, each component of which or from <code>a</code>, or from <code>b</code>…\nReturns point, each component of which or from <code>a</code>, or from <code>b</code>…\nReturns size, each component of which or from <code>a</code>, or from <code>b</code> …\nReturns size, each component of which or from <code>a</code>, or from <code>b</code> …\nReturns vector, each component of which or from <code>a</code>, or from …\nReturns vector, each component of which or from <code>a</code>, or from …\nChange the size of the box by adjusting the max endpoint …\nShorthand for <code>Size2D::new(w, h)</code>.\nShorthand for <code>Size3D::new(w, h, d)</code>.\nCreate a 2d skew transform.\nSpherical linear interpolation between this rotation and …\nConstructor setting all components to the same value.\nConstructor setting all components to the same value.\nConstructor setting all components to the same value.\nConstructor setting all components to the same value.\nConstructor setting all components to the same value.\nConstructor setting all components to the same value.\nReturns the vector’s length squared.\nReturns the vector’s length squared.\nComputes the squared norm of this quaternion.\nReturns the multiplication of the two transforms such that …\nReturns a rotation representing the other rotation …\nReturns a rotation representing this rotation followed by …\nReturns the multiplication of the two matrices such that …\nReturns the multiplication of the two matrices such that …\nApplies a rotation after self’s transformation and …\nReturns a transform with a rotation applied after self’s …\nApplies a scale after self’s transformation and returns …\nReturns a transform with a scale applied after self’s …\nApplies a translation after self’s transformation and …\nReturns a transform with a translation applied after self…\nConvert into a 2d point.\nConvert into a 2d vector.\nCreate a 2D transform picking the relevant terms from this …\nConvert into a 3d point with z-coordinate equals to zero.\nCreates a 3d rotation (around the z axis) from this 2d …\nConvert into a 3d vector with <code>z</code> coordinate equals to …\nCreate a 3D transform from the current transform\nCast into an array with x and y.\nCast into an array with x, y and z.\nReturn this size as an array of two elements (width, then …\nReturn this size as an array of three elements (width, …\nCast into an array with x and y.\nCast into an array with x, y and z.\nCast into an array with x and y.\nCast into an array with x, y and z.\nReturns an array containing this transform’s terms.\nReturns an array containing this transform’s terms.\nCast into an array with x, y, z and 0.\nReturns an array containing this transform’s terms …\nReturns an array containing this transform’s terms …\nEquivalent to <code>to_array</code> with elements packed two at a time …\nEquivalent to <code>to_array</code> with elements packed four at a time …\nEquivalent to <code>to_array_transposed</code> with elements packed …\nCast into an <code>f32</code> box.\nCast into an <code>f32</code> box3d.\nCast into an <code>f32</code> point.\nCast into an <code>f32</code> point.\nCast into an <code>f32</code> rectangle.\nCast into an <code>f32</code> size.\nCast into an <code>f32</code> size.\nCast into an <code>f32</code> vector.\nCast into an <code>f32</code> vector.\nCast into an <code>f32</code> vector.\nCast into an <code>f32</code> vector.\nCast into an <code>f64</code> box.\nCast into an <code>f64</code> box3d.\nCast into an <code>f64</code> point.\nCast into an <code>f64</code> point.\nCast into an <code>f64</code> rectangle.\nCast into an <code>f64</code> size.\nCast into an <code>f64</code> size.\nCast into an <code>f64</code> vector.\nCast into an <code>f64</code> vector.\nCast into an <code>f64</code> vector.\nCast into an <code>f64</code> vector.\nCast into an <code>i32</code> box, truncating decimals if any.\nCast into an <code>i32</code> box3d, truncating decimals if any.\nCast into an i32 point, truncating decimals if any.\nCast into an <code>i32</code> point, truncating decimals if any.\nCast into an <code>i32</code> rectangle, truncating decimals if any.\nCast into an <code>i32</code> size, truncating decimals if any.\nCast into an <code>i32</code> size, truncating decimals if any.\nCast into an i32 vector, truncating decimals if any.\nCast into an i32 vector, truncating decimals if any.\nCast into an i32 vector, truncating decimals if any.\nCast into an <code>i32</code> vector, truncating decimals if any.\nCast into an <code>i64</code> box, truncating decimals if any.\nCast into an <code>i64</code> box3d, truncating decimals if any.\nCast into an i64 point, truncating decimals if any.\nCast into an <code>i64</code> point, truncating decimals if any.\nCast into an <code>i64</code> rectangle, truncating decimals if any.\nCast into an <code>i64</code> size, truncating decimals if any.\nCast into an <code>i64</code> size, truncating decimals if any.\nCast into an i64 vector, truncating decimals if any.\nCast into an i64 vector, truncating decimals if any.\nCast into an i64 vector, truncating decimals if any.\nCast into an <code>i64</code> vector, truncating decimals if any.\nCast this vector into a point.\nCast this vector into a point.\nConvert into Cartesian 2D point.\nConvert into Cartesian 3D point.\nCast this vector into a size.\nReturns the matrix representation of this rotation.\nReturns the matrix representation of this rotation.\nReturns the matrix representation of this translation.\nReturns the matrix representation of this translation.\nCreates translation by this vector in vector units.\nCreates translation by this vector in vector units\nCast into a tuple with x and y.\nCast into a tuple with x, y and z.\nReturn this size as a tuple of two elements (width, then …\nReturn this size as an array of three elements (width, …\nCast into a tuple with x and y.\nCast into a tuple with x, y and z.\nCast into a tuple with x and y.\nCast into a tuple with x, y and z.\nCast into a tuple with x, y, z and 0.\nCast into an <code>u32</code> box, truncating decimals if any.\nCast into an <code>u32</code> box3d, truncating decimals if any.\nCast into an <code>u32</code> point, truncating decimals if any.\nCast into an <code>u32</code> point, truncating decimals if any.\nCast into an <code>u32</code> rectangle, truncating decimals if any.\nCast into an <code>u32</code> size, truncating decimals if any.\nCast into an <code>u32</code> size, truncating decimals if any.\nCast into an <code>u32</code> vector, truncating decimals if any.\nCast into an <code>u32</code> vector, truncating decimals if any.\nCast into an <code>u32</code> vector, truncating decimals if any.\nCast into an <code>u32</code> vector, truncating decimals if any.\nCast into an <code>u64</code> rectangle, truncating decimals if any.\nCast into an <code>u64</code> size, truncating decimals if any.\nDrop the units, preserving only the numeric value.\nDrop the units, preserving only the numeric value.\nDrop the units, preserving only the numeric value.\nDrop the units, preserving only the numeric value.\nDrop the units, preserving only the numeric value.\nDrop the units, preserving only the numeric value.\nDrop the units, preserving only the numeric value.\nDrop the units, preserving only the numeric value.\nDrop the units, preserving only the numeric value.\nDrop the units, preserving only the numeric value.\nDrop the units, preserving only the numeric value.\nDrop the units, preserving only the numeric value.\nDrop the units, preserving only the numeric value.\nDrop the units, preserving only the numeric value.\nDrop the units, preserving only the numeric value.\nDrop the units, preserving only the numeric value.\nCast into an <code>usize</code> box, truncating decimals if any.\nCast into an <code>usize</code> box3d, truncating decimals if any.\nCast into an <code>usize</code> point, truncating decimals if any.\nCast into an <code>usize</code> point, truncating decimals if any.\nCast into an <code>usize</code> rectangle, truncating decimals if any.\nCast into an <code>uint</code> size, truncating decimals if any.\nCast into an <code>uint</code> size, truncating decimals if any.\nCast into an <code>usize</code> vector, truncating decimals if any.\nCast into an <code>usize</code> vector, truncating decimals if any.\nCast into an <code>usize</code> vector, truncating decimals if any.\nCast into an <code>usize</code> vector, truncating decimals if any.\nCast this point into a vector.\nCast this point into a vector.\nReturn this size as a vector with width and height.\nReturn this size as a vector with width, height and depth.\nCast into a 2D vector.\nCast into a 3D vector.\nTranslate a 2D box and cast its unit.\nReturns the given box transformed by this scale.\nTranslate a 2D box and cast its unit.\nReturns the given box transformed by this scale.\nTranslate a 3D box and cast its unit.\nReturns the given 2d point transformed by this rotation.\nReturns the given point transformed by this scale.\nTranslate a point and cast its unit.\nReturns the given point transformed by this transform.\nReturns the given 2d point transformed by this rotation …\nTranslate a point and cast its unit.\nReturns the given 2d point transformed by this transform, …\nReturns the homogeneous vector corresponding to the …\nReturns the given 3d point transformed by this rotation.\nReturns the given point transformed by this scale.\nTranslate a point and cast its unit.\nReturns the given 3d point transformed by this transform, …\nReturns the homogeneous vector corresponding to the …\nReturns the given rect transformed by this scale.\nTranslate a rectangle and cast its unit.\nTranslate a rectangle and cast its unit.\nReturns the given size transformed by this scale.\nNo-op, just cast the unit.\nNo-op, just cast the unit.\nReturns the given 2d vector transformed by this rotation.\nReturns the given vector transformed by this scale.\nReturns the given vector transformed by this matrix.\nReturns the given 2d vector transformed by this rotation …\nReturns the given 2d vector transformed by this matrix.\nReturns the given 3d vector transformed by this rotation.\nReturns the given 3d vector transformed by this matrix.\nReturns the same box, translated by a vector.\nReturns the same box3d, translated by a vector.\nReturns the same rectangle, translated by a vector.\nCreate a 2d translation transform:\nCreate a 3d translation transform:\nFallible cast from one numeric representation to another, …\nFallible cast from one numeric representation to another, …\nFallible cast from one numeric representation to another, …\nFallible cast from one numeric representation to another, …\nFallible cast from one numeric representation to another, …\nFallible cast from one numeric representation to another, …\nFallible cast from one numeric representation to another, …\nFallible cast from one numeric representation to another, …\nFallible cast from one numeric representation to another, …\nFallible cast from one numeric representation to another, …\nFallible cast from one numeric representation to another, …\nFallible cast from one numeric representation to another, …\nFallible cast from one numeric representation to another, …\nFallible cast from one numeric representation to another, …\nFallible cast from one numeric representation to another, …\nReturns the vector with length of one unit.\nReturns the vector with length of one unit.\nComputes the union of two boxes.\nComputes the union of two boxes.\nCreates a rotation around from a quaternion representation …\nConvenience constructor.\nConvenience constructor.\nReturns the vector part (i, j, k) of this quaternion.\nReturns result of multiplication of all components\nThe extent of the element in the <code>U</code> units along the <code>x</code> axis …\nThe extent of the element in the <code>U</code> units along the <code>x</code> axis.\nReturns the same transform with a different destination …\nReturns the same transform with a different destination …\nReturn this vector scaled to fit the provided length.\nReturn this vector capped to a maximum length.\nReturn this vector capped to a maximum length.\nReturn this vector with a minimum length applied.\nReturn this vector with a minimum length applied.\nReturns the same transform with a different source unit.\nReturns the same transform with a different source unit.\nThe <code>x</code> (traditionally, horizontal) coordinate.\nThe <code>x</code> (traditionally, horizontal) coordinate.\nReturns a 2d point using this point’s x and y coordinates\nReturns a 2d vector using this vector’s x and y …\nReturns a 2d vector using this vector’s x and y …\nReturns a 2d point using this point’s x and z coordinates\nReturns a 2d vector using this vector’s x and z …\nReturns a 2d vector using this vector’s x and z …\nThe <code>y</code> (traditionally, vertical) coordinate.\nThe <code>y</code> (traditionally, vertical) coordinate.\nSwap x and y.\nSwap x and y.\nReturns a 2d point using this point’s x and z coordinates\nReturns a 2d vector using this vector’s x and z …\nReturns a 2d vector using this vector’s y and z …\nThe <code>z</code> (traditionally, depth) coordinate.\nConstructor, setting all sides to zero.\nConstructor, setting all sides to zero.\nThe same as <code>origin()</code>.\nThe same as <code>origin()</code>.\nConstructor, setting all sides to zero.\nConstructor, setting all sides to zero.\nThe same as <code>Zero::zero()</code> but available without importing …\nThe same as <code>Zero::zero()</code> but available without importing …\nConstructor, setting all components to zero.\nConstructor, setting all components to zero.\nConstructor, setting all components to zero.\nConstructor, setting all components to zero.\nApply the function <code>f</code> to each pair of components of this …\nApply the function <code>f</code> to each pair of components of this …\nApply the function <code>f</code> to each pair of components of this …\nApply the function <code>f</code> to each pair of components of this …\nTrait for testing approximate equality\nDefault epsilon value\nReturns <code>true</code> is this object is approximately equal to the …\nReturns <code>true</code> is this object is approximately equal to the …\nAngle in radians\nThe extent of the element in the <code>U</code> units along the <code>z</code> axis.\nThe extent of the element in the <code>U</code> units along the <code>y</code> axis …\nThe extent of the element in the <code>U</code> units along the <code>y</code> axis.\nComponent multiplied by the imaginary number <code>i</code>.\nComponent multiplied by the imaginary number <code>j</code>.\nComponent multiplied by the imaginary number <code>k</code>.\nThe real part.\nThe extent of the element in the <code>U</code> units along the <code>x</code> axis …\nThe extent of the element in the <code>U</code> units along the <code>x</code> axis.\nThe <code>x</code> (traditionally, horizontal) coordinate.\nThe <code>x</code> (traditionally, horizontal) coordinate.\nThe <code>y</code> (traditionally, vertical) coordinate.\nThe <code>y</code> (traditionally, vertical) coordinate.\nThe <code>z</code> (traditionally, depth) coordinate.\nDefines the smallest integer equal or greater than the …\nDefines the biggest integer equal or lower than the …\nDefines the nearest integer value to the original value.\nRounds to the smallest integer equal or greater than the …\nRounds to the biggest integer equal or lower than the …\nRounds to the nearest integer value.\nA flattening iterator for quadratic bézier segments.\nA flattening iterator for quadratic bézier segments.\nA 2d curve segment defined by three points: the beginning …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCommon APIs to segment types.\nReturn the curve after the split point.\nCompute the length of the segment using a flattened …\nReturn the curve before the split point.\nSample the derivative at t (expecting t between 0 and 1).\nSample x derivative at t (expecting t between 0 and 1).\nSample y derivative at t (expecting t between 0 and 1).\nSwap the direction of the segment.\nApproximates the curve with sequence of line segments.\nStart of the curve.\nSample the curve at t (expecting t between 0 and 1).\nSplit this curve into two sub-curves.\nReturn the curve inside a given range of t.\nEnd of the curve.\nSample x at t (expecting t between 0 and 1).\nSample y at t (expecting t between 0 and 1).\nAngle between vectors v1 and v2 (oriented clockwise …\nAn iterator that consumes <code>Event</code> iterator and yields …\nAn iterator that consumes an iterator of <code>Point</code>s and …\nAn extension trait for <code>PathEvent</code> iterators.\nApplies a 2D transform to a path iterator and yields the …\nReturns an iterator that turns curves into line segments.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate the iterator.\nCreates a new transformed path iterator from a path …\nReturns an iterator applying a 2D transform to all of its …\nAn angle in radians (f32).\nAlias for <code>euclid::default::Box2D&lt;f32&gt;</code>\nAlias for <code>euclid::default::Point2D&lt;f32&gt;</code>.\nAlias for <code>euclid::default::Rotation2D&lt;f32&gt;</code>\nAlias for <code>euclid::default::Scale&lt;f32&gt;</code>\nAlias for <code>euclid::default::Size2D&lt;f32&gt;</code>.\nAlias for <code>euclid::default::Transform2D&lt;f32&gt;</code>\nAlias for <code>euclid::default::Translation2D&lt;f32&gt;</code>\nAlias for <code>euclid::default::Point2D&lt;f32&gt;</code>.\nAngle in radians\nThe extent of the element in the <code>U</code> units along the <code>y</code> axis …\nShorthand for <code>Point::new(x, y)</code>.\nShorthand for <code>Size::new(x, y)</code>.\nShorthand for <code>Vector::new(x, y)</code>.\nThe extent of the element in the <code>U</code> units along the <code>x</code> axis …\nThe <code>x</code> (traditionally, horizontal) coordinate.\nThe <code>y</code> (traditionally, vertical) coordinate.\nThe default builder for <code>Path</code>.\nA builder for <code>Path</code> with custom attributes.\nAn iterator of endpoint and control point ids for <code>Path</code> and …\nAn iterator for <code>Path</code> and <code>PathSlice</code>.\nAn iterator for <code>Path</code> and <code>PathSlice</code>.\nA simple path data structure.\nA view on a <code>Path</code>.\nAn iterator of over a <code>Path</code> traversing the path in reverse.\nA Builder that appends a path to an existing PathBuffer.\nA Builder that appends a path to an existing PathBuffer, …\nIterator over the paths in a <code>PathBufferSlice</code>.\nAn object that stores multiple paths contiguously.\nA view on a <code>PathBuffer</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA view over a sequence of endpoint IDs forming a polygon.\nAn iterator of <code>Event&lt;EndpointId, ()&gt;</code>.\nAn iterator of <code>PathEvent</code>.\nA view over a sequence of endpoints forming a polygon.\nAn iterator of <code>IdEvent</code> for <code>Polygon</code>.\nAn iterator of <code>Event&lt;&amp;Endpoint, ()&gt;</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBuilds a path.\nThe base path building interface.\nAn extension trait for <code>PathEvent</code> iterators.\nThe type of object that is created by this builder.\nA path building interface that tries to stay close to SVG…\nAdds a sub-path containing a circle.\nAdds a sub-path containing an ellipse.\nAdds a sub-path containing a single line segment.\nAdds a sub-path containing a single point.\nAdds a sub-path from a polygon.\nAdds a sub-path from a polygon.\nAdds a sub-path containing a rectangle.\nAdds a sub-path containing a rectangle.\nAdds an elliptical arc.\nStarts a new sub-path at a given position.\nBuilds a path object, consuming the builder.\nEnds the current sub-path by connecting it back to its …\nCloses the current sub path.\nAdds a cubic bézier curve to the current sub-path.\nAdds a cubic bézier segment to the current sub-path.\nEnds the current sub path.\nReturns a builder that approximates all curves with …\nReturns an iterator that turns curves into line segments.\nAdds an horizontal line segment.\nAdds a line segment to the current sub-path.\nAdds a line segment to the current sub-path.\nStart a new sub-path at the given position.\nApplies the provided path event.\nAdds a quadratic bézier curve to the current sub-path.\nAdds a quadratic bézier segment to the current sub-path.\nEquivalent to <code>arc_to</code> in relative coordinates.\nEquivalent to <code>cubic_bezier_to</code> in relative coordinates.\nAdds an horizontal line segment in relative coordinates.\nEquivalent to <code>line_to</code> in relative coordinates.\nEquivalent to <code>move_to</code> in relative coordinates.\nEquivalent to <code>quadratic_bezier_to</code> in relative coordinates.\nAdds a vertical line segment in relative coordinates.\nHints at the builder that a certain number of endpoints …\nHints at the builder that a certain number of endpoints …\nEquivalent to <code>cubic_bezier_to</code> with implicit first control …\nEquivalent to <code>quadratic_bezier_to</code> with implicit control …\nEquivalent to <code>smooth_cubic_bezier_to</code> in relative …\nEquivalent to <code>smooth_quadratic_bezier_to</code> in relative …\nReturns a builder that applies the given transformation to …\nReturns an iterator applying a 2D transform to all of its …\nAdds a vertical line segment.\nReturns a builder that support SVG commands.\nA bevelled corner.\nThe stroke for each sub-path does not extend beyond its …\nA <code>Gradient</code> color.\nThe shape used at the end of open subpaths when they are …\nThe dash pattern used when stroking the line.\nThe shape used at the corners of paths or basic shapes …\nA sharp corner.\nAt the end of each sub-path, the shape representing the …\nA round corner.\nA solid <code>Color</code>.\nAt the end of each sub-path, the shape representing the …\nThe style of a stroke.\nThe coloring style of some drawing.\nThe shape to be used at the end of open subpaths when they …\nThe dash pattern used when stroking the line.\nThe shape to be used at the corners of paths or basic …\nThe offset of <code>LineDash::segments</code> to start the pattern.\nThe alternating lengths of lines and gaps which describe …\nThe color or gradient of the stroke.\nThe distance between the two edges of the stroke.\nThe appearance of a checkbox.\nA box that can be checked.\nThe icon in a <code>Checkbox</code>.\nThe supported style of the <code>StyleSheet</code>.\nA set of rules that dictate the style of a checkbox.\nProduces the active <code>Appearance</code> of a checkbox.\nThe <code>Background</code> of the checkbox.\nThe <code>Border</code> of hte checkbox.\nThe unicode code point that will be used as the icon.\nFont that will be used to display the <code>code_point</code>,\nReturns the argument unchanged.\nReturns the argument unchanged.\nProduces the hovered <code>Appearance</code> of a checkbox.\nThe icon <code>Color</code> of the checkbox.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe line height of the icon.\nThe shaping strategy of the icon.\nFont size of the content.\nThe text <code>Color</code> of the checkbox.\nThe wrap mode of the icon.\nA widget for searching and selecting a single value from a …\nThe local state of a <code>ComboBox</code>.\nBuild matchers from given list of options.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new <code>State</code> for a <code>ComboBox</code> with the given list of …\nSearch list of options for a given query.\nCreates a new <code>State</code> for a <code>ComboBox</code> with the given list of …\nThe appearance of a container.\nAn element decorating some content.\nThe supported style of the <code>StyleSheet</code>.\nA set of rules that dictate the <code>Appearance</code> of a container.\nProduces the <code>Appearance</code> of a container.\nThe <code>Background</code> of the container.\nThe <code>Border</code> of the container.\nDraws the background of a <code>Container</code> given its <code>Appearance</code> …\nReturns the argument unchanged.\nThe icon <code>Color</code> of the container.\nCalls <code>U::from(self)</code>.\nComputes the layout of a <code>Container</code>.\nThe <code>Shadow</code> of the container.\nThe text <code>Color</code> of the container.\nProduces a <code>Command</code> that queries the visible screen bounds …\nDerives a new <code>Appearance</code> with the given <code>Background</code>.\nDerives a new <code>Appearance</code> with a border of the given <code>Color</code> …\nImage filtering strategy.\nA handle of some image data.\nA frame that displays an image while keeping aspect ratio.\nBilinear interpolation.\nNearest neighbor.\nA frame that displays an image with the ability to zoom …\nReturns a reference to the image <code>Data</code>.\nDraws an <code>Image</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates an image <code>Handle</code> containing the image data directly.\nCreates an image <code>Handle</code> pointing to the image of the given …\nCreates an image <code>Handle</code> containing the image pixels …\nSets the height of the <code>Viewer</code>.\nReturns the unique identifier of the <code>Handle</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nComputes the layout of an <code>Image</code>.\nSets the max scale applied to the image of the <code>Viewer</code>.\nSets the min scale applied to the image of the <code>Viewer</code>.\nCreates a new <code>Viewer</code> with the given <code>State</code>.\nSets the padding of the <code>Viewer</code>.\nSets the percentage the image of the <code>Viewer</code> will be scaled …\nZoom and pan on an image.\nCreates a new <code>Viewer</code> with the given image <code>Handle</code>.\nSets the width of the <code>Viewer</code>.\nThe local state of a <code>Viewer</code>.\nA frame that displays an image with the ability to zoom …\nReturns the argument unchanged.\nReturns the bounds of the underlying image, given the …\nCalls <code>U::from(self)</code>.\nReturns if the cursor is currently grabbed by the <code>Viewer</code>.\nCreates a new <code>State</code>.\nA container that distributes its contents vertically.\nSets the horizontal alignment of the contents of the <code>Column</code>…\nDistribute content vertically.\nReturns the argument unchanged.\nSets the height of the <code>Column</code>.\nCalls <code>U::from(self)</code>.\nSets the maximum width of the <code>Column</code>.\nCreates an empty <code>Column</code>.\nSets the <code>Padding</code> of the <code>Column</code>.\nAdds an element to the <code>Column</code>.\nSets the vertical spacing <em>between</em> elements.\nSets the width of the <code>Column</code>.\nCreates a <code>Column</code> with the given elements.\nA container that distributes its contents vertically.\nBuild and show dropdown menus.\nThe appearance of a menu.\nA list of selectable options.\nThe local state of a <code>Menu</code>.\nThe supported style of the <code>StyleSheet</code>.\nThe style sheet of a menu.\nProduces the <code>Appearance</code> of a menu.\nThe <code>Background</code> of the menu.\nThe <code>Border</code> of the menu.\nSets the font of the <code>Menu</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>Menu</code> with the given <code>State</code>, a list of …\nCreates a new <code>State</code> for a <code>Menu</code>.\nTurns the <code>Menu</code> into an overlay <code>Element</code> at the given target …\nSets the <code>Padding</code> of the <code>Menu</code>.\nThe background <code>Color</code> of a selected option in the menu.\nThe text <code>Color</code> of a selected option in the menu.\nSets the style of the <code>Menu</code>.\nThe text <code>Color</code> of the menu.\nSets the text <code>text::LineHeight</code> of the <code>Menu</code>.\nSets the <code>text::Shaping</code> strategy of the <code>Menu</code>.\nSets the text size of the <code>Menu</code>.\nSets the <code>text::Wrap</code> mode of the <code>Menu</code>.\nSets the width of the <code>Menu</code>.\nAll panes are visible\nThe appearance of the hovered region of a pane grid.\nA fixed reference line for the measurement of coordinates.\nBottom edge.\nA <code>Pane</code> was picked and then dropped outside of other <code>Pane</code> …\nCenter region.\nThe arrangement of a <code>PaneGrid</code>.\nThe content of a <code>Pane</code>.\nThe visible contents of the <code>PaneGrid</code>\nA four cardinal direction.\n↓\nAn event produced during a drag and drop interaction of a …\nA pane that can be dragged.\nA <code>Pane</code> was dropped on top of another <code>Pane</code>.\nThe edges of an area.\nAn <code>Edge</code> of the full <code>PaneGrid</code>.\nEdge region.\nThe horizontal axis: —\n←\nLeft edge.\nA line.\nA maximized pane is visible\nA layout node of a <code>PaneGrid</code>.\nA rectangular region in a <code>PaneGrid</code> used to display widgets.\nA <code>Pane</code>.\nThe region of this <code>Node</code> is taken by a <code>Pane</code>.\nA single <code>Pane</code> of the <code>PaneGrid</code>.\nA collection of panes distributed using either vertical or …\nA <code>Pane</code> was picked for dragging.\nThe region of a <code>Pane</code>.\nAn event produced during a resize interaction of a <code>PaneGrid</code>…\n→\nRight edge.\nA divider that splits a region in a <code>PaneGrid</code> into two …\nA split of the available space.\nThe region of this <code>Node</code> is split into two.\nThe state of a <code>PaneGrid</code>.\nThe supported style of the <code>StyleSheet</code>.\nA set of rules that dictate the style of a container.\nThe <code>Target</code> area a pane can be dropped on.\nThe title bar of a <code>Pane</code>.\nTop edge.\n↑\nThe vertical axis: |\nReturns the adjacent <code>Pane</code> of another <code>Pane</code> in the given …\nSets whether or not the <code>controls</code> attached to this <code>TitleBar</code> …\nThe <code>Background</code> of the pane region.\nThe <code>Border</code> of the pane region.\nReturns whether the <code>Draggable</code> with the given <code>Layout</code> can be …\nCloses the given <code>Pane</code> and returns its internal state and …\nThe <code>Color</code> of the <code>Line</code>.\nSets the controls of the <code>TitleBar</code>.\nDraws a <code>PaneGrid</code>.\nDraws the <code>Content</code> with the provided <code>Renderer</code> and <code>Layout</code>.\nDraws the <code>TitleBar</code> with the provided <code>Renderer</code> and <code>Layout</code>.\nDrops the given <code>Pane</code> into the provided <code>Target</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the internal state of the given <code>Pane</code>, if it exists.\nReturns the internal state of the given <code>Pane</code> with …\nThe <code>Appearance</code> to draw when a pane is hovered.\nThe <code>Line</code> to draw when a split is hovered.\nThe internal state of the <code>PaneGrid</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the amount of panes in the <code>State</code> is 0.\nReturns whether the mouse cursor is over the pick area of …\nReturns an iterator over all the panes of the <code>State</code>, …\nReturns an iterator over the values of the <code>Contents</code>\nReturns a mutable iterator over all the panes of the <code>State</code>,\nCalculates the <code>Layout</code> of a <code>PaneGrid</code>.\nReturns the layout of the <code>State</code>.\nReturns the layout <code>Node</code> of the <code>Contents</code>\nReturns the total amount of panes in the <code>State</code>.\nMaximize the given <code>Pane</code>. Only this pane will be rendered …\nReturns the maximized <code>Pane</code> of the <code>PaneGrid</code>.\nReturns the current <code>mouse::Interaction</code> of a <code>PaneGrid</code>.\nMove <code>Pane</code> to an <code>Edge</code> of the <code>PaneGrid</code>.\nCreates a new <code>Content</code> with the provided body.\nCreates a new <code>TitleBar</code> with the given content.\nCreates a new <code>State</code>, initializing the first pane with the …\nSets the <code>Padding</code> of the <code>TitleBar</code>.\nReturns the rectangular region for each <code>Pane</code> in the <code>Node</code> …\nThe panes of the <code>PaneGrid</code>.\nThe <code>Line</code> to draw when a split is picked.\nThe new ratio of the <code>Split</code>.\nResizes two panes by setting the position of the provided …\nRestore the currently maximized <code>Pane</code> to it’s normal …\nSplits the provided <code>Rectangle</code> on the current <code>Axis</code> with the …\nSplits the given <code>Pane</code> into two in the given <code>Axis</code> and …\nThe <code>Split</code> that is being dragged for resizing.\nCalculates the bounds of the split line in a <code>Rectangle</code> …\nReturns the axis, rectangular region, and ratio for each …\nSplit a target <code>Pane</code> with a given <code>Pane</code> on a given <code>Region</code>.\nReturns an iterator over each <code>Split</code> in this <code>Node</code>.\nThe state of a <code>PaneGrid</code>.\nSets the style of the <code>Content</code>.\nSets the style of the <code>TitleBar</code>.\nSwaps the position of the provided panes in the <code>State</code>.\nSets the <code>TitleBar</code> of this <code>Content</code>.\nProcesses an <code>Event</code> and updates the <code>state</code> of a <code>PaneGrid</code> …\nThe width of the <code>Line</code>.\nCreates a new <code>State</code> with the given <code>Configuration</code>.\nThe left/top <code>Configuration</code> of the split.\nThe direction of the split.\nThe right/bottom <code>Configuration</code> of the split.\nThe ratio of the split in [0.0, 1.0].\nThe picked <code>Pane</code>.\nThe picked <code>Pane</code>.\nThe picked <code>Pane</code>.\nThe <code>Target</code> where the picked <code>Pane</code> was dropped on.\nThe left/top <code>Node</code> of the split.\nThe direction of the split.\nThe right/bottom <code>Node</code> of the split.\nThe <code>Split</code> of this <code>Node</code>.\nThe ratio of the split in [0.0, 1.0].\nThe current action of a <code>PaneGrid</code>.\nA <code>Pane</code> in the <code>PaneGrid</code> is being clicked.\nA <code>Pane</code> in the <code>PaneGrid</code> is being dragged.\nThe <code>PaneGrid</code> is idle.\nThe internal state of a <code>PaneGrid</code>.\nA <code>Split</code> in the <code>PaneGrid</code> is being dragged.\nThe state of a <code>PaneGrid</code>.\nReturns the current <code>Pane</code> that is being clicked, if any.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInitializes the <code>Internal</code> state of a <code>PaneGrid</code> from a …\nThe internal state of the <code>PaneGrid</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe layout <code>Node</code> of the <code>Internal</code> state\nThe panes of the <code>PaneGrid</code>.\nReturns the current <code>Pane</code> that is being dragged, if any.\nReturns the current <code>Split</code> that is being dragged, if any.\nThe <code>Axis</code> of the <code>Split</code>.\nThe starting <code>Point</code> of the click interaction.\nThe starting <code>Point</code> of the drag interaction.\nThe <code>Pane</code> being clicked.\nThe <code>Pane</code> being dragged.\nThe <code>Split</code> being dragged.\nThe appearance of a pick list.\nDisplays an arrow icon (▼).\nA custom dynamic handle.\nThe handle to the right side of the <code>PickList</code>.\nThe icon of a <code>Handle</code>.\nNo handle will be shown.\nA widget for selecting a single value from a list of …\nThe state of a <code>PickList</code>.\nA custom static handle.\nThe supported style of the <code>StyleSheet</code>.\nA set of rules that dictate the style of a container.\nProduces the active <code>Appearance</code> of a pick list.\nThe <code>Background</code> of the pick list.\nThe <code>Border</code> of the pick list.\nThe unicode code point that will be used as the icon.\nDraws a <code>PickList</code>.\nFont that will be used to display the <code>code_point</code>,\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe handle <code>Color</code> of the pick list.\nProduces the hovered <code>Appearance</code> of a pick list.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nComputes the layout of a <code>PickList</code>.\nLine height of the content.\nReturns the current <code>mouse::Interaction</code> of a <code>PickList</code>.\nReturns the current overlay of a <code>PickList</code>.\nThe placeholder <code>Color</code> of the pick list.\nThe shaping strategy of the icon.\nFont size of the content.\nThe text <code>Color</code> of the pick list.\nProcesses an <code>Event</code> and updates the <code>State</code> of a <code>PickList</code> …\nThe wrap mode of the icon.\nThe <code>Icon</code> used when <code>PickList</code> is closed.\nThe <code>Icon</code> used when <code>PickList</code> is open.\nFont size of the content.\nThe appearance of a progress bar.\nA bar that displays progress.\nThe supported style of the <code>StyleSheet</code>.\nA set of rules that dictate the style of a progress bar.\nProduces the <code>Appearance</code> of the progress bar.\nThe <code>Background</code> of the progress bar.\nThe <code>Background</code> of the bar of the progress bar.\nThe border radius of the progress bar.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe appearance of a radio button.\nA circular button representing a choice.\nThe supported style of the <code>StyleSheet</code>.\nA set of rules that dictate the style of a radio button.\nProduces the active <code>Appearance</code> of a radio button.\nThe <code>Background</code> of the radio button.\nThe border <code>Color</code> of the radio button.\nThe border width of the radio button.\nThe <code>Color</code> of the dot of the radio button.\nReturns the argument unchanged.\nProduces the hovered <code>Appearance</code> of a radio button.\nCalls <code>U::from(self)</code>.\nThe text <code>Color</code> of the radio button.\nThe appearance of a rule.\nDifferent offset on each end of the rule, length units. …\nThe fill mode of a rule.\nFill the whole length of the container.\nUniform offset from each end, length units.\nFill a percent of the length of the container. The rule …\nDisplay a horizontal or vertical rule for dividing content.\nThe supported style of the <code>StyleSheet</code>.\nA set of rules that dictate the style of a rule.\nProduces the style of a rule.\nThe color of the rule.\nReturn the starting offset and length of the rule.\nThe <code>FillMode</code> of the rule.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe radius of the line corners.\nThe width (thickness) of the rule line.\nThe amount of absolute offset in each direction of a …\nAlignment of the scrollable’s content relative to it’s …\nBoth vertical and horizontal scrolling\nThe direction of <code>Scrollable</code>.\nA relative offset that points to the bottom-right of a …\nContent is aligned to the end of the <code>Viewport</code>\nHorizontal scrolling\nProperties of a scrollbar within a <code>Scrollable</code>.\nThe amount of relative offset in each direction of a …\nA relative offset that points to the top-left of a …\nA widget that can vertically display an infinite amount of …\nThe appearance of a scrollable.\nThe appearance of the scroller of a scrollable.\nContent is aligned to the start of the <code>Viewport</code>.\nThe local state of a <code>Scrollable</code>.\nThe supported style of the <code>StyleSheet</code>.\nA set of rules that dictate the style of a scrollable.\nVertical scrolling\nThe current <code>Viewport</code> of the <code>Scrollable</code>.\nReturns the <code>AbsoluteOffset</code> of the current <code>Viewport</code>.\nReturns the <code>AbsoluteOffset</code> of the current <code>Viewport</code>, but …\nProduces the style of an active scrollbar.\nProduces the style of an active horizontal scrollbar.\nSets the alignment of the <code>Scrollable</code> .\nThe <code>Background</code> of a scrollable.\nThe <code>Border</code> of a scrollable.\nThe <code>Border</code> of the scroller.\nReturns the bounds of the current <code>Viewport</code>.\nThe <code>Color</code> of the scroller.\nReturns the content bounds of the current <code>Viewport</code>.\nProduces the style of a scrollbar that is being dragged.\nProduces the style of a horizontal scrollbar that is being …\nDraws a <code>Scrollable</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the <code>Properties</code> of the horizontal scrollbar, if any.\nProduces the style of a scrollbar when the scrollable is …\nProduces the style of a horizontal scrollbar when the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nComputes the layout of a <code>Scrollable</code>.\nSets the scrollbar margin of the <code>Scrollable</code> .\nComputes the current <code>mouse::Interaction</code> of a <code>Scrollable</code>.\nCreates new <code>Properties</code> for use in a <code>Scrollable</code>.\nCreates a new <code>State</code> with the scrollbar(s) at the beginning.\nReturns the <code>RelativeOffset</code> of the current <code>Viewport</code>.\nApply a scrolling offset to the current <code>State</code>, given the …\nProduces a <code>Command</code> that scrolls the <code>Scrollable</code> with the …\nScroll to the provided <code>AbsoluteOffset</code>.\nScrolls the <code>Scrollable</code> to a relative amount along the x …\nScrolls the <code>Scrollable</code> to a relative amount along the y …\nThe appearance of the <code>Scroller</code> of a scrollable.\nSets the scroller width of the <code>Scrollable</code> .\nReturns whether any scroller is currently grabbed or not.\nProduces a <code>Command</code> that snaps the <code>Scrollable</code> with the …\nSnaps the scroll position to a <code>RelativeOffset</code>.\nUnsnaps the current scroll position, if snapped, given the …\nProcesses an <code>Event</code> and updates the <code>State</code> of a <code>Scrollable</code> …\nReturns the <code>Properties</code> of the vertical scrollbar, if any.\nSets the scrollbar width of the <code>Scrollable</code> .\nThe amount of horizontal offset\nThe amount of horizontal offset\nThe amount of vertical offset\nThe amount of vertical offset\nThe properties of the horizontal scrollbar.\nThe properties of the vertical scrollbar.\nThe appearance of a slider.\nA circular handle.\nLinear gradient for the background of the rail includes an …\nThe appearance of the handle of a slider.\nThe shape of the handle of a slider.\nStart and end colors of the rail\nThe appearance of a slider rail\nThe background color of the rail\nA rectangular shape.\nAn horizontal bar and a handle that selects a single value …\nThe local state of a <code>Slider</code>.\nThe supported style of the <code>StyleSheet</code>.\nA set of rules that dictate the style of a slider.\nProduces the style of an active slider.\nThe border <code>Color</code> of the handle.\nThe border radius of the corners of the rail.\nThe border width of the handle.\nThe appearance of breakpoints.\nThe <code>Color</code> of the handle.\nThe colors of the rail of the slider.\nProduces the style of a slider that is being dragged.\nDraws a <code>Slider</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe appearance of the <code>Handle</code> of the slider.\nProduces the style of an hovered slider.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nComputes the current <code>mouse::Interaction</code> of a <code>Slider</code>.\nCreates a new <code>State</code>.\nThe colors of the rail of the slider.\nThe shape of the handle.\nProcesses an <code>Event</code> and updates the <code>State</code> of a <code>Slider</code> …\nThe width of the stroke of a slider rail.\nThe border radius of the corners of the rectangle.\nThe height of the rectangle.\nThe radius of the circle.\nThe width of the rectangle.\nLet the widget determin the angle of the gradient\nthe linear gradient of the slider\nAn amount of empty space.\nThe appearance of an SVG.\nA handle of Svg data.\nThe supported style of the <code>StyleSheet</code>.\nThe stylesheet of a svg.\nA vector graphics image.\nProduces the <code>Appearance</code> of the svg.\nThe <code>Color</code> filter of an SVG.\nReturns a reference to the SVG <code>Data</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates an SVG <code>Handle</code> from raw bytes containing either an …\nCreates an SVG <code>Handle</code> pointing to the vector image of the …\nProduces the hovered <code>Appearance</code> of a svg content.\nReturns the unique identifier of the <code>Handle</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn absolute height in logical pixels.\nAdvanced text shaping and font fallback.\nThe apperance of some text.\nNo shaping and no font fallback.\nWraps at a glyph level\nThe height of a line of text in a paragraph.\nNo wraping\nA factor of the size of the text.\nThe shaping strategy of some text.\nThe internal state of a <code>Text</code> widget.\nThe supported style of the <code>StyleSheet</code>.\nThe style sheet of some text.\nA paragraph.\nWraps at a word level\nWraps at the word level, or fallback to glyph level if a …\nThe wrap mode of some text.\nProduces the <code>Appearance</code> of some text.\nThe <code>Color</code> of the text.\nDraws text using the same logic as the <code>Text</code> widget.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nProduces the <code>layout::Node</code> of a <code>Text</code> widget.\nReturns the <code>LineHeight</code> in absolute logical pixels.\nAn interaction with an <code>Editor</code>.\nThe appearance of a text input.\nDelete the previous character.\nClick the <code>Editor</code> at the given <code>Point</code>.\nThe content of a <code>TextEditor</code>.\nDelete the next character.\nMove to the end of the text.\nMove to the start of the text.\nMove down.\nDrag the mouse on the <code>Editor</code> to the given <code>Point</code>.\nAn action that edits text.\nPerform an <code>Edit</code>.\nMove to the end of the line.\nBreak the current line.\nMove to the start of the line.\nInsert the given character.\nMove left.\nA cursor movement.\nApply a <code>Motion</code>.\nMove to the start of the next window.\nMove to the start of the previous window.\nPaste the given text.\nMove right.\nScroll the <code>Editor</code> a certain amount of lines.\nSelect text with a given <code>Motion</code>.\nSelect the line at the current cursor.\nSelect the word at the current cursor.\nThe supported style of the <code>StyleSheet</code>.\nA set of rules that dictate the style of a text input.\nA multi-line text input.\nMove up.\nMove to the left boundary of a word.\nMove to the right boundary of a word.\nProduces the style of an active text input.\nThe <code>Background</code> of the text editor.\nThe <code>Border</code> of the text editor.\nReturns the current cursor position of the <code>Content</code>.\nReturns the <code>Direction</code> of the <code>Motion</code>.\nProduces the style of a disabled text input.\nProduces the <code>Color</code> of the value of a disabled text input.\nProduces the style of a focused text input.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nProduces the style of an hovered text input.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the <code>Action</code> is an editing action.\nReturns the text of the line at the given index, if it …\nReturns the amount of lines of the <code>Content</code>.\nReturns an iterator of the text of the lines in the <code>Content</code>…\nCreates an empty <code>Content</code>.\nPerforms an <code>Action</code> on the <code>Content</code>.\nProduces the <code>Color</code> of the placeholder of a text input.\nReturns the selected text of the <code>Content</code>.\nProduces the <code>Color</code> of the selection of a text input.\nReturns the text of the <code>Content</code>.\nProduces the <code>Color</code> of the value of a text input.\nWidens the <code>Motion</code>, if possible.\nCreates a <code>Content</code> with the given text.\nThe amount of lines to scroll.\nThe appearance of a text input.\nThe cursor of a text input.\nThe default <code>Padding</code> of a <code>TextInput</code>.\nThe content of the <code>Icon</code>.\nThe left side of a <code>TextInput</code>.\nThe right side of a <code>TextInput</code>.\nThe side of a <code>TextInput</code>.\nThe state of a <code>TextInput</code>.\nThe supported style of the <code>StyleSheet</code>.\nA set of rules that dictate the style of a text input.\nA field that can be filled with text.\nThe value of a <code>TextInput</code>.\nProduces the style of an active text input.\nThe <code>Background</code> of the text input.\nThe <code>Border</code> of the text input.\nThe unicode code point that will be used as the icon.\nTrack the cursor of a text input.\nReturns the <code>Cursor</code> of the <code>TextInput</code>.\nProduces the style of a disabled text input.\nProduces the <code>Color</code> of the value of a disabled text input.\nDraws the <code>TextInput</code> with the given <code>Renderer</code>, overriding its\nProduces a <code>Command</code> that focuses the <code>TextInput</code> with the …\nFocuses the <code>TextInput</code>.\nProduces the style of a focused text input.\nCreates a new <code>State</code>, representing a focused <code>TextInput</code>.\nThe font that will be used to display the <code>code_point</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nProduces the style of an hovered text input.\nThe icon <code>Color</code> of the text input.\nInserts a new <code>char</code> at the given grapheme <code>index</code>.\nInserts a bunch of graphemes at the given grapheme <code>index</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the <code>Value</code> is empty or not.\nReturns whether the <code>TextInput</code> is currently focused or not.\nComputes the layout of a <code>TextInput</code>.\nReturns the total amount of graphemes in the <code>Value</code>.\nComputes the current <code>mouse::Interaction</code> of the <code>TextInput</code>.\nProduces a <code>Command</code> that moves the cursor of the <code>TextInput</code> …\nMoves the <code>Cursor</code> of the <code>TextInput</code> to an arbitrary location.\nProduces a <code>Command</code> that moves the cursor of the <code>TextInput</code> …\nMoves the <code>Cursor</code> of the <code>TextInput</code> to the end of the input …\nProduces a <code>Command</code> that moves the cursor of the <code>TextInput</code> …\nMoves the <code>Cursor</code> of the <code>TextInput</code> to the front of the …\nCreates a new <code>Value</code> from a string slice.\nCreates a new <code>State</code>, representing an unfocused <code>TextInput</code>.\nReturns the position of the next end of a word from the …\nProduces the <code>Color</code> of the placeholder of a text input.\nReturns the position of the previous start of a word from …\nRemoves the grapheme at the given <code>index</code>.\nRemoves the graphemes from <code>start</code> to <code>end</code>.\nReturns a new <code>Value</code> with all its graphemes replaced with …\nReturns a new <code>Value</code> containing the graphemes from <code>start</code> …\nProduces a <code>Command</code> that selects all the content of the …\nSelects all the content of the <code>TextInput</code>.\nReturns the current selection of the <code>Cursor</code> for the given …\nProduces the <code>Color</code> of the selection of a text input.\nThe side of a <code>TextInput</code> where to display the <code>Icon</code>.\nThe font size of the content.\nThe spacing between the <code>Icon</code> and the text in a <code>TextInput</code>.\nReturns the <code>State</code> of the <code>Cursor</code>.\nUnfocuses the <code>TextInput</code>.\nReturns a new <code>Value</code> containing the graphemes until the …\nProcesses an <code>Event</code> and updates the <code>State</code> of a <code>TextInput</code> …\nProduces the <code>Color</code> of the value of a text input.\nThe cursor of a text input.\nCursor without a selection\nCursor selecting a range of text\nThe state of a <code>Cursor</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe end of the selection\nThe start of the selection\nThe style of an application.\nA simple box.\nThe style of a button.\nThe style of a checkbox.\nColored text.\nThe style of a container.\nA <code>Theme</code> with a customized <code>Palette</code>.\nA <code>Theme</code> that uses a <code>Custom</code> palette.\nA custom style.\nA custom style.\nA custom style.\nA custom style.\nA custom style.\nA custom style.\nA custom style.\nA custom style.\nA custom style.\nA custom style.\nA custom style.\nA custom style.\nA custom style.\nA custom style.\nA custom style.\nA custom style.\nThe danger style.\nThe danger style.\nThe built-in dark variant.\nThe default style.\nThe default style.\nThe default style.\nThe default style.\nThe default style.\nThe default style.\nThe default style.\nThe default style.\nNo filtering to the rendered SVG.\nThe default style.\nThe default style.\nThe default style.\nThe default style.\nThe destructive style.\nThe built-in light variant.\nThe style of a menu.\nA color palette.\nThe style of a pane grid.\nThe style of a pick list.\nThe positive style.\nThe primary style.\nThe primary style.\nThe primary style.\nThe style of a progress bar.\nThe style of a radio button.\nThe style of a rule.\nThe style of a scrollable.\nThe secondary style.\nThe secondary style.\nThe style of a slider.\nThe success style.\nThe success style.\nSvg\nThe style of text.\nThe text style.\nThe style of a text input.\nThe style of a text input.\nA built-in theme.\nThe style of a toggler.\nNo style.\nThe background <code>Color</code> of the <code>Palette</code>.\nThe danger <code>Color</code> of the <code>Palette</code>.\nDefine the colors of a theme.\nThe primary <code>Color</code> of the <code>Palette</code>.\nThe success <code>Color</code> of the <code>Palette</code>.\nThe text <code>Color</code> of the <code>Palette</code>.\nA set of background colors.\nA set of danger colors.\nThe built-in dark variant of an <code>Extended</code> palette.\nThe built-in light variant of an <code>Extended</code> palette.\nAn extended set of colors generated from a <code>Palette</code>.\nRecommended background, icon, and text <code>Color</code>.\nA color palette.\nA set of primary colors.\nA set of secondary colors.\nA set of success colors.\nThe background <code>Color</code> of the <code>Palette</code>.\nThe set of background colors.\nThe base background color.\nThe base primary color.\nThe base secondary color.\nThe base success color.\nThe base danger color.\nThe background color.\nThe danger <code>Color</code> of the <code>Palette</code>.\nThe set of danger colors.\nThe icon color, which defaults to the text color.\nWhether the palette is dark or not.\nThe primary <code>Color</code> of the <code>Palette</code>.\nThe set of primary colors.\nThe set of secondary colors.\nA stronger version of the base background color.\nA stronger version of the base primary color.\nA stronger version of the base secondary color.\nA stronger version of the base success color.\nA stronger version of the base danger color.\nThe success <code>Color</code> of the <code>Palette</code>.\nThe set of success colors.\nThe text <code>Color</code> of the <code>Palette</code>.\nThe text color.\nA weaker version of the base background color.\nA weaker version of the base primary color.\nA weaker version of the base secondary color.\nA weaker version of the base success color.\nA weaker version of the base danger color.\nThe appearance of a toggler.\nThe supported style of the <code>StyleSheet</code>.\nA set of rules that dictate the style of a toggler.\nA toggler widget.\nReturns the active <code>Appearance</code> of the toggler for the …\nThe background <code>Color</code> of the toggler.\nThe <code>Color</code> of the background border of the toggler.\nThe border radius of the toggler.\nThe foreground <code>Color</code> of the toggler.\nThe <code>Color</code> of the foreground border of the toggler.\nReturns the argument unchanged.\nthe space between the handle and the border of the toggler\nthe radius of the handle of the toggler\nReturns the hovered <code>Appearance</code> of the toggler for the …\nCalls <code>U::from(self)</code>.\nThe tooltip will appear on the bottom of the widget.\nThe tooltip will follow the cursor.\nThe tooltip will appear on the left of the widget.\nThe position of the tooltip. Defaults to following the …\nThe tooltip will appear on the right of the widget.\nAn element to display a widget over another.\nThe tooltip will appear on the top of the widget.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe appearance of a slider.\nA circular handle.\nThe appearance of the handle of a slider.\nThe shape of the handle of a slider.\nA rectangular shape.\nThe local state of a <code>VerticalSlider</code>.\nThe supported style of the <code>StyleSheet</code>.\nA set of rules that dictate the style of a slider.\nAn vertical bar and a handle that selects a single value …\nProduces the style of an active slider.\nThe border <code>Color</code> of the handle.\nThe border width of the handle.\nThe appearance of breakpoints.\nThe <code>Color</code> of the handle.\nProduces the style of a slider that is being dragged.\nDraws a <code>VerticalSlider</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe appearance of the <code>Handle</code> of the slider.\nProduces the style of an hovered slider.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nComputes the current <code>mouse::Interaction</code> of a <code>VerticalSlider</code>…\nCreates a new <code>State</code>.\nThe colors of the rail of the slider.\nThe shape of the handle.\nProcesses an <code>Event</code> and updates the <code>State</code> of a …\nThe border radius of the corners of the rectangle.\nThe height of the rectangle.\nThe radius of the circle.\nThe width of the rectangle.\nAn operation to be performed on some window.\nThe window will always be below normal windows.\nThe window will always be on top of normal windows.\nRedraw at the given time.\nThe window is completely centered on the screen.\nChange the window <code>Icon</code>.\nChange the window <code>Level</code>.\nChange the <code>Mode</code> of the window.\nClose the window and exits the application.\nThe user has requested for the window to close.\nA window was closed.\nPlatform-specific\nThe platform-specific default position for a new window.\nMove the window with the left mouse button until the …\nA window-related event.\nFetch the raw identifier unique to the window.\nFetch if the current window is maximized or not.\nFetch if the current window is minimized or not.\nFetch the current <code>Mode</code> of the window.\nFetch the current logical dimensions of the window.\nA file has been dropped into the window.\nA file is being hovered over the window.\nA file was hovered, but has exited the window.\nA window was focused.\nThe application takes the whole screen of its current …\nBring the window to the front and sets input focus. Has no …\nThe application is hidden\nAn window icon normally used for the titlebar or taskbar.\nAn window icon normally used for the titlebar or taskbar.\nThe id of the window.\nPlatform-specific\nA window level groups windows with respect to their …\nThe reserved window <code>Id</code> for the first window in an Iced …\nSet the window to maximized or back\nSet the window to minimized or back\nThe mode of a window-based application.\nMove the window to the given logical coordinates.\nA window was moved.\nRedraw the next frame.\nThe default behavior.\nA window was opened.\nThe platform specific window settings of an application.\nThe position of a window in a given screen.\nA request to redraw a window.\nA window redraw was requested.\nRequest user attention to the window, this has no effect …\nResize the window to the given logical dimensions.\nA window was resized.\nData of a screenshot, captured with <code>window::screenshot()</code>.\nScreenshot the viewport of the window.\nThe window settings of an application.\nThe window settings of an application.\nShow window menu at cursor position.\nSpawns a new window with some <code>Settings</code>.\nThe window is positioned with specific coordinates: <code>(X, Y)</code>.\nToggle whether window has decorations.\nToggle the window to maximized or back\nA window was unfocused.\nThe type of user attention to request.\nThe application appears in its own window.\nSets the application id of the window.\nThe bytes of the <code>Screenshot</code>.\nChanges the <code>Icon</code> of the window.\nChanges the window <code>Level</code>.\nChanges the <code>Mode</code> of the window.\nCloses the window with <code>id</code>.\nCrops a <code>Screenshot</code> to the provided <code>region</code>. This will …\nWhether the window should have a border, a title bar, etc. …\nWhether the window should have a border, a title bar, etc. …\nBegins dragging the window while the left mouse button is …\nWhether the window will close when the user requests it, …\nWhether the window will close when the user requests it, …\nFetches an identifier unique to the window, provided by …\nFetches if the window is maximized.\nFetches if the window is minimized.\nFetches the current <code>Mode</code> of the window.\nFetches the window’s size in logical dimensions.\nSubscribes to the frames of the window of the running …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBrings the window to the front and sets input focus. Has …\nAttach an icon to the window of your application.\nThe icon of the window.\nThe icon of the window.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the raw data of the <code>Icon</code>.\nThe window <code>Level</code>.\nThe window <code>Level</code>.\nMaps the output of a window <code>Action</code> using the provided …\nThe maximum size of the window.\nThe maximum size of the window.\nMaximizes the window.\nThe minimum size of the window.\nThe minimum size of the window.\nMinimizes the window.\nMoves the window to the given logical coordinates.\nCreates a new <code>Screenshot</code>.\nPlatform specific settings.\nPlatform specific settings.\nThe initial position of the window.\nThe initial position of the window.\nRequest user attention to the window. This has no effect …\nWhether the window should be resizable or not.\nWhether the window should be resizable or not.\nResizes the window to the given logical dimensions.\nThe border area for the drag resize handle.\nThe border area for the drag resize handle.\nTake screenshots of a window.\nCaptures a <code>Screenshot</code> from the window.\nConfigure your windows.\nShow window menu at cursor position.\nThe size of the <code>Screenshot</code>.\nThe initial logical dimensions of the window.\nThe initial logical dimensions of the window.\nSpawns a new window with the given <code>settings</code>.\nToggles the window decorations.\nToggles the window to maximized or back.\nWhether the window should be transparent.\nWhether the window should be transparent.\nCreates a new unique window <code>Id</code>.\nWhether the window should be visible or not.\nWhether the window should be visible or not.\nThe new logical height of the window\nThe position of the opened window. This is relative to the …\nThe size of the created window. This is its “inner” …\nThe new logical width of the window\nThe new logical x location of the window\nThe new logical y location of the window\nAn error produced when creating an <code>Icon</code>.\nAn window icon normally used for the titlebar or taskbar.\nThe <code>image</code> crate reported an error.\nThe <code>Icon</code> is not valid.\nThe underlying OS failed to create the icon.\nReturns the argument unchanged.\nCreates an icon from an image file.\nCreates an icon from the content of an image file.\nBuilds an  <code>Icon</code> from its RGBA pixels in the <code>sRGB</code> color …\nCalls <code>U::from(self)</code>.\nErrors that can occur when cropping a <code>Screenshot</code>.\nThe cropped region’s size is out of bounds.\nData of a screenshot, captured with <code>window::screenshot()</code>.\nThe cropped region’s size is zero.\nThe bytes of the <code>Screenshot</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe size of the <code>Screenshot</code>.\nThe platform specific window settings of an application.\nThe window settings of an application.\nSets the application id of the window.\nWhether the window should have a border, a title bar, etc. …\nWhether the window will close when the user requests it, …\nReturns the argument unchanged.\nThe icon of the window.\nCalls <code>U::from(self)</code>.\nThe window <code>Level</code>.\nThe maximum size of the window.\nThe minimum size of the window.\nPlatform specific settings.\nThe initial position of the window.\nWhether the window should be resizable or not.\nThe border area for the drag resize handle.\nThe initial logical dimensions of the window.\nWhether the window should be transparent.\nWhether the window should be visible or not.")