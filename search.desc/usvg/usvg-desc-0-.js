searchState.loadedDescShard("usvg", 0, "<code>usvg</code> (micro SVG) is an SVG parser that tries to solve most …\nAn attribute ID.\nRepresentation of the <code>align</code> value of the …\nAn alignment baseline property.\nIndicates that the alpha values of the mask should be used.\nApproxEqUlps is a trait for approximate equality …\nApproximate zero equality comparisons.\nRepresentation of the <code>preserveAspectRatio</code> attribute.\nA bounding box calculator.\nA generic gradient.\nA baseline shift property.\nA blending mode property.\nA clip-path element.\nA 8-bit RGB color.\nA dominant baseline property.\nAn element ID.\nWe do not allow SVG with more than 1_000_000 elements for …\nList of all errors.\nA fill style.\nA fill rule.\nText font properties.\nA font stretch property.\nA font style property.\nA reference to raw GIF data. Should be decoded by the …\nA group container.\nA raster image element.\nAn <code>xlink:href</code> resolver for <code>&lt;image&gt;</code> elements.\nAn embedded image kind.\nAn image rendering method.\nSVG doesn’t have a valid size.\nChecks that the current number is &gt; 0.\nA form that is generally cursive in nature.\nA reference to raw JPEG data. Should be decoded by the …\nA length adjust property.\nA line cap.\nA line join.\nA linear layout.\nA linear gradient.\nIndicates that the luminance values of the mask should be …\nCompressed SVG must use the GZip algorithm.\nA mask element.\nA mask type.\nAlias for <code>rctree::Node&lt;NodeKind&gt;</code>.\nAdditional <code>Node</code> methods.\nNode’s kind.\nA non-zero <code>f32</code>.\nAn immutable, finite <code>f32</code> that is known to be &gt; 0.\nA rectangle defined by left, top, right and bottom edges.\nA face that is neither italic not obliqued.\nAn immutable, finite <code>f32</code> in a 0..=1 range.\nOnly UTF-8 content are supported.\nA typically-sloped version of the regular face.\nAn alias to <code>NormalizedF32</code>.\nProcessing options.\nA reference to raw PNG data. Should be decoded by the …\nA paint style.\nRepresentation of the <code>paint-order</code> property.\nFailed to parse an SVG data.\nA path element.\nA text-on-path layout.\nA pattern element.\nAn immutable, finite <code>f32</code> that is known to be &gt;= 0.\nA radial gradient.\nA rectangle defined by left, top, right and bottom edges.\nA preprocessed SVG tree. Can be rendered as is.\nA shape rendering method.\nA size.\nA spread method.\nGradient’s stop element.\nAn alias to <code>NormalizedF32</code>.\nA stroke style.\nA <code>stroke-miterlimit</code> value.\nAn alias to <code>NonZeroPositiveF32</code>.\nA text element.\nA text chunk anchor property.\nA text chunk.\nA text span decoration.\nA text span decoration style.\nA text chunk flow property.\nA path used by text-on-path.\nA text rendering method.\nA text style span.\nAn affine transformation matrix.\nA nodes tree container.\nA trait to parse <code>usvg_tree::Tree</code> from various sources.\nA <code>usvg::Tree</code> extension trait.\nA trait to write <code>usvg::Tree</code> back to SVG.\nAn element units.\nView box.\nA visibility property.\nA writing mode.\nXML writing options.\nA <code>PositiveF32</code> value initialized with zero.\nReturns node’s absolute transform.\nElement’s absolute transform.\n<code>&lt;align&gt;</code> value.\nA span alignment baseline.\nA text anchor.\nAppends <code>kind</code> as a node child.\nIndicates that a kerning should be applied.\nThis method tests for <code>self</code> and <code>other</code> values to be …\nThis method tests for <code>self</code> and <code>other</code> values to be not …\nChecks if the number is approximately zero.\nValue of the <code>preserveAspectRatio</code> attribute.\nBase gradient data.\nBase gradient data.\nA list of all baseline shift that should be applied to …\nApplies a bounding box transform.\nApplies a bounding box transform.\nConstructs a new <code>Color</code> set to black.\nGroup blend mode.\nReturns the bottom edge.\nReturns the bottom edge.\nContains a text bounding box.\nCalculates absolute transforms for all nodes in the tree.\nCalculates node’s absolute bounding box.\nA list of text chunks.\nAdditional clip path.\nElement’s clip path.\nCalls a closure for each <code>ClipPath</code> in the tree.\nGradient stop color.\nContent coordinate system units.\nContent coordinate system units.\nConverts text nodes into paths.\nSet the coordinates numeric precision.\nSegments list.\nDecompresses an SVGZ file.\nA span decorations.\nCreates a default Data URL resolver closure.\nDefault viewport size to assume if there is no <code>viewBox</code> …\nCreates a default string resolver.\n<code>&lt;defer&gt;</code> value.\nA span dominant baseline.\nTarget DPI.\nA relative X axis offsets.\nA relative Y axis offsets.\nA span end in bytes.\nExpand the bounding box to the specified bounds.\nExpands current size to specified size.\nA list of family names.\nA fill style.\nA fill style.\nFill style.\nSVG filter types.\nCalls a closure for each <code>Filter</code> in the tree.\nElement’s filters.\nText converted into paths, ready to render.\nA font.\nA default font family.\nA font size.\nA default font size.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts <code>Rect</code> into a bounding box <code>Transform</code>.\nParses <code>Tree</code> from an SVG data.\nParses <code>Tree</code> from an SVG data.\nCreates new <code>Rect</code>.\nCreates new <code>NonZeroRect</code>.\nCreates a <code>Fill</code> from <code>Paint</code>.\nCreates a Rect from Point array.\nCreates a new rotating <code>Transform</code>.\nCreates a new rotating <code>Transform</code> at the specified position.\nCreates a new <code>Transform</code>.\nCreates a new scaling <code>Transform</code>.\nCreates a new skewing <code>Transform</code>.\nParses <code>Tree</code> from an SVG string.\nParses <code>Tree</code> from an SVG string.\nCreates a new translating <code>Transform</code>.\nCreates a new <code>Size</code> from width and height.\nParses <code>Tree</code> from <code>roxmltree::Document</code>.\nParses <code>Tree</code> from <code>roxmltree::Document</code>.\nCreates new <code>Rect</code>.\nCreates new <code>NonZeroRect</code>.\nReturns the value as a primitive type.\nReturns an underlying value.\nReturns an underlying value.\nConverts a relative path into absolute relative to the SVG …\nReturns the value as a <code>FiniteF32</code>.\nReturns transform’s scale part.\nChecks that transform contains a scale part.\nChecks that transform contains a skew part.\nChecks if the current tree has any text nodes.\nChecks that transform contains a translate part.\nReturns rect’s height.\nReturns rect’s height.\nReturns height.\nReturns node’s ID.\nReturns node’s ID.\nElement’s ID.\nElement’s ID.\nElement’s ID.\nElement’s ID.\nElement’s ID.\nElement’s ID.\nElement’s ID.\nElement’s ID.\nElement’s ID.\nUsed to add a custom prefix to each element ID during …\nCreates an identity transform.\nSpecifies the way <code>xlink:href</code> in <code>&lt;image&gt;</code> elements should be …\nSpecifies the default image rendering method.\nInsets the rectangle by the specified offset.\nReturns an intersection of two rectangles.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an inverted transform.\nChecks if the bounding box is default, i.e. invalid.\nChecks that transform is finite.\nChecks if this is a gradient element.\nChecks if this is a graphics element.\nChecks that transform is identity.\nChecks if this is a paint server element.\nChecks that transform is scale-only.\nChecks that transform contains only scale and translate.\nChecks that transform is skew-only.\nChecks that transform is translate-only.\nChecks that transform is finite and has non-zero scale.\nChecks that the current number is &gt; 0.\nGroup isolation.\nMask type.\nImage data.\nA list of languages.\nReturns the left edge.\nReturns the left edge.\nA length adjust property.\nA letter spacing property.\nAn optional line-through and its style.\nTransforms a points using the current transform.\nTransforms a slice of points using the current transform.\nAdditional mask.\nElement’s mask.\nCalls a closure for each <code>Mask</code> in the tree.\nCreates a new <code>PositiveF32</code> if the given value is &gt;= 0.\nCreates a new <code>NonZeroF32</code> value.\nCreates a new <code>StrokeMiterlimit</code> value.\nCreates a new <code>Path</code> with default values.\nConstructs a new <code>Color</code> from RGB values.\nCreates a new <code>PositiveF32</code> without checking the value.\nReturns renderable node by ID.\nGradient stop offset.\nGradient stop opacity.\nGroup opacity.\nOutsets the rectangle by the specified offset.\nAn optional overline and its style.\nA paint order style.\nFill and stroke paint order.\nCalls a closure for each <code>Paint</code> in the tree.\nA path.\nPost-concats the current transform.\nPost-rotates the current transform.\nPost-rotates the current transform by the specified …\nPost-scales the current transform.\nPost-translates the current transform.\nPre-concats the current transform.\nPre-rotates the current transform.\nPre-rotates the current transform by the specified …\nPre-scales the current transform.\nPre-translates the current transform.\nValue of the <code>viewBox</code> attribute.\nPattern rectangle.\nMask rectangle.\nRendering mode.\nRendering mode.\nRendering mode.\nResolver function that will be used when <code>xlink:href</code> …\nResolver function that will be used to handle an arbitrary …\nDirectory that will be used during relative paths …\nReturns the right edge.\nReturns the right edge.\nPattern children.\nClip path children.\nClip path children.\nThe root element of the SVG tree.\nA list of rotation angles.\nConverts into an <code>IntRect</code> by adding 0.5 and discarding the …\nConverts into an <code>IntRect</code> rounding outwards.\nScales current size to specified size.\nSpecifies the default shape rendering method.\nChecks if this group should be isolated during rendering.\nReturns rect’s size.\nImage size.\n<code>&lt;meetOrSlice&gt;</code> value.\nIndicates that small caps should be used.\nA list of text chunk style spans.\nGradient spreading method.\nA span start in bytes.\nA text offset in SVG coordinates.\nA list of <code>stop</code> elements.\nA font stretch.\nA stroke style.\nA stroke style.\nStroke style.\nA font style.\nCalls a closure for each subroot this <code>Node</code> has.\nA text chunk actual text.\nA text chunk flow.\nA text length property.\nSpecifies the default text rendering method.\nConverts into <code>IntRect</code>.\nConverts into <code>IntSize</code>.\nConverts a bounding box into <code>NonZeroRect</code>.\nConverts into <code>NonZeroRect</code>.\nConverts the current size to <code>NonZeroRect</code> at provided …\nConverts a bounding box into <code>Rect</code>.\nConverts into <code>Rect</code>.\nConverts the current size to <code>Rect</code> at provided position.\nReturns the original string.\nReturns the original string.\nWrites <code>usvg::Tree</code> back to SVG.\nReturns the top edge.\nReturns the top edge.\nTransforms the bounding box.\nTransforms the rect using the provided <code>Transform</code>.\nTransforms the rect using the provided <code>Transform</code>.\nGradient transform.\nPattern transform.\nClip path transform.\nElement’s transform.\nSet the transform values numeric precision.\nTranslates the rect to the specified position.\nAn optional underline and its style.\nReturns paint server units.\nCoordinate system units.\nCoordinate system units.\nCoordinate system units.\nCoordinate system units.\nChecks if anti-aliasing should be enabled.\nSome useful utilities.\nPattern viewbox.\nAn image rectangle in which it should be fit.\nSVG viewbox.\nA visibility property.\nElement visibility.\nElement visibility.\nA font width.\nConstructs a new <code>Color</code> set to white.\nReturns rect’s width.\nReturns rect’s width.\nReturns width.\nA word spacing property.\n<code>xmlwriter</code> options.\nA writing mode.\nReturns rect’s X position.\nReturns rect’s X position.\nAn absolute X axis offset.\nReturns rect’s Y position.\nReturns rect’s Y position.\nAn absolute Y axis offset.\nA blend filter primitive.\nA color channel.\nA color interpolation mode.\nA color matrix filter primitive.\nA color matrix filter primitive kind.\nA component-wise remapping filter primitive.\nA composite filter primitive.\nAn images compositing operation.\nA matrix convolution filter primitive.\nA convolve matrix representation.\nA diffuse lighting filter primitive.\nApplies a step function to a component.\nA displacement map filter primitive.\nA distant light source.\nA drop shadow filter primitive.\nAn edges processing mode.\nA filter element.\nA flood filter primitive.\nApplies an exponential shift to a component.\nA Gaussian blur filter primitive.\nKeeps a component as is.\nAn image filter primitive.\nAn image data.\nKind of the <code>feImage</code> data.\nIdentifies input for a filter primitive.\nA filter kind.\nA light source kind.\nApplies a linear shift to a component.\nA merge filter primitive.\nA morphology filter primitive.\nA morphology operation.\nAn offset filter primitive.\nA point light source.\nA filter primitive element.\nA specular lighting filter primitive.\nA spot light source.\nApplies a linear interpolation to a component.\nA tile filter primitive.\nA transfer function used by <code>FeComponentTransfer</code>.\nA turbulence generation filter primitive.\nA turbulence kind for the <code>feTurbulence</code> filter.\nAn SVG node.\nValue of the <code>preserveAspectRatio</code> attribute.\nDirection angle for the light source on the XY plane …\nIdentifies the base frequency for the noise function.\nIdentifies the base frequency for the noise function.\nA kernel matrix bias.\nA flood color.\nA flood color.\nColor interpolation mode.\nReturns a number of columns in the matrix.\nThe actual matrix.\nImage data.\nA diffuse constant.\nA matrix divisor.\nThe amount to offset the input graphic along the X-axis.\nThe amount to offset the input graphic along the X-axis.\nThe amount to offset the input graphic along the Y-axis.\nThe amount to offset the input graphic along the Y-axis.\nAn edges processing mode.\nDirection angle for the light source from the XY plane …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\n<code>feFuncA</code> in the SVG.\n<code>feFuncB</code> in the SVG.\n<code>feFuncG</code> in the SVG.\n<code>feFuncR</code> in the SVG.\nReturns a matrix value at the specified position.\nChecks that <code>FilterKind</code> has a specific input.\nThe filter subregion height.\nElement’s ID.\nIdentifies input for the given filter primitive.\nIdentifies input for the given filter primitive.\nIdentifies input for the given filter primitive.\nIdentifies input for the given filter primitive.\nIdentifies input for the given filter primitive.\nIdentifies input for the given filter primitive.\nIdentifies input for the given filter primitive.\nIdentifies input for the given filter primitive.\nIdentifies input for the given filter primitive.\nIdentifies input for the given filter primitive.\nIdentifies input for the given filter primitive.\nIdentifies input for the given filter primitive.\nIdentifies input for the given filter primitive.\nIdentifies input for the given filter primitive.\nIdentifies input for the given filter primitive.\nIdentifies input for the given filter primitive.\nList of input layers that should be merged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFilter primitive kind.\nA matrix kind.\nIndicates whether the filter primitive should perform a …\nA light source.\nA light source.\nA lighting color.\nA lighting color.\nA limiting cone which restricts the region where the light …\nA convolve matrix.\nA blending mode.\nCreates a new <code>ConvolveMatrixData</code>.\nIdentifies the number of octaves for the noise function.\nA flood opacity.\nA flood opacity.\nA compositing operation.\nA filter operator.\nX point at which the light source is pointing.\nY point at which the light source is pointing.\nZ point at which the light source is pointing.\nAn alpha preserving flag.\nContent coordinate system units.\nA list of filter primitives.\nA filter radius along the X-axis.\nA filter radius along the Y-axis.\nFilter region.\nRendering method.\nAssigned name for this filter primitive.\nReturns a number of rows in the matrix.\nScale factor.\nThe starting number for the pseudo random number generator.\nA specular constant.\nA specular exponent.\nExponent value controlling the focus for the light source.\nA standard deviation along the X-axis.\nA standard deviation along the X-axis.\nA standard deviation along the Y-axis.\nA standard deviation along the Y-axis.\nSmooth transitions at the border of tiles.\nA surface scale.\nA surface scale.\nReturns a matrix’s X target.\nReturns a matrix’s Y target.\nRegion coordinate system units.\nThe filter subregion width.\n<code>x</code> coordinate of the filter subregion.\nX location for the light source.\nX location for the light source.\nIndicates a source color channel along the X-axis.\n<code>y</code> coordinate of the filter subregion.\nY location for the light source.\nY location for the light source.\nIndicates a source color channel along the Y-axis.\nZ location for the light source.\nZ location for the light source.\nBlack weight (900), the thickest value.\nBold weight (700).\nA font’s raw data, typically backed by a Vec.\nGlyphs in cursive fonts generally use a more informal …\nA font database.\nExtra-bold weight (800).\nExtra light weight (200).\nA single font face info.\nA font family.\nFantasy fonts are primarily decorative or expressive fonts …\nA font’s path.\nA unique per database face ID.\nA form that is generally cursive in nature.\nLight weight (300).\nA <code>Name</code> language.\nMedium weight (500, higher than normal).\nThe sole criterion of a monospace font is that all glyphs …\nNormal (400).\nThe name of a font family of choice.\nA face that is neither italic not obliqued.\nA typically-sloped version of the regular face.\nA database query.\nSemibold weight (600).\nGlyphs in sans-serif fonts, as the term is used in CSS, …\nSerif fonts represent the formal text style for a script.\nA font’s raw data originating from a shared file mapping.\nA font source.\nA face width.\nAllows italic or oblique faces to be selected.\nThin weight (100), the thinnest value.\nSpecifies the weight of glyphs in the font, their degree …\nCreates a dummy ID.\nSelects a <code>FaceInfo</code> by <code>id</code>.\nReturns font face storage and the face index by <code>ID</code>.\nReturns an iterator over the internal storage.\nA list of family names.\nA prioritized list of font family names or generic family …\nReturns the generic family name or the <code>Family::Name</code> itself.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAn unique ID.\nA face index in the <code>source</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the <code>Database</code> contains no font faces.\nReturns the number of font faces in the <code>Database</code>.\nLoads a font data into the <code>Database</code>.\nLoads a font file into the <code>Database</code>.\nLoads a font from the given source into the <code>Database</code> and …\nLoads font files from the selected directory into the …\nAttempts to load system fonts.\nTransfers ownership of shared font data back to the font …\nMakes the font data that backs the specified face id …\nIndicates that the font face is monospaced.\nCreate a new, empty <code>Database</code>.\nA PostScript name.\nReturns the primary language.\nPushes a user-provided <code>FaceInfo</code> to the database.\nPerforms a CSS-like query and returns the best matched …\nReturns a language region.\nRemoves a font face by <code>id</code> from the database.\nSets the family that will be used by <code>Family::Cursive</code>.\nSets the family that will be used by <code>Family::Fantasy</code>.\nSets the family that will be used by <code>Family::Monospace</code>.\nSets the family that will be used by <code>Family::SansSerif</code>.\nSets the family that will be used by <code>Family::Serif</code>.\nA font source.\nA font face stretch.\nSelects a normal, condensed, or expanded face from a font …\nA font face style.\nAllows italic or oblique faces to be selected.\nReturns a numeric representation of a width.\nA font face weight.\nSpecifies the weight of glyphs in the font, their degree …\nExecutes a closure with a font’s data.\nAn attribute.\nIterator over a node’s attributes\nIndicates that too many attributes were parsed.\nIterator over specified axis.\nA raw slice of the input string.\nIterator over children.\nA comment node.\nIterator over a node and its descendants.\nAn XML tree container.\nAn XML with DTD detected.\nAn element has a duplicated attributes.\nA namespace was already defined on this element.\nAn element node.\nA possible entity reference loop.\nA list of all possible errors.\nAn expanded name.\nAttribute value cannot have a <code>&lt;</code> character.\nAn invalid/unexpected character.\nAn invalid/unexpected character.\nA Character Data node contains an invalid data.\nA comment cannot contain <code>--</code> or end with <code>-</code>.\n<code>xmlns</code> can’t be used as an element prefix.\nAn invalid ExternalID in the DTD.\nAn invalid name.\nAn unexpected string.\nThe <code>xmlns:xml</code> attribute must have an …\nA malformed entity reference.\nThe http://www.w3.org/2000/xmlns/ URI.\nThe http://www.w3.org/XML/1998/namespace URI.\nA namespace.\nIterator over the namespaces attached to a node.\nIndicates that too many namespaces were parsed.\nThe XML document must have at least one element.\nA node in a document.\nA node ID stored as <code>u32</code>.\nA list of supported node types.\nIndicates that the <code>ParsingOptions::nodes_limit</code> was reached.\nA non-XML character has occurred.\nA reference-counted string.\nA processing instruction.\nA processing instruction.\nParsing options.\nThe root node of the <code>Document</code>.\nA string storage.\nA text node.\nPosition in text.\nThe root node was opened but never closed.\nIncorrect tree structure.\nAn XML document can have only one XML declaration and it …\nThe steam ended earlier than we expected.\nEntity value starts with a close tag.\nOnly the <code>xmlns:xml</code> attribute can have the …\nThe http://www.w3.org/2000/xmlns/ URI must not be declared.\nA reference to an entity that was not defined in the DTD.\nAn unknown namespace.\nAn unknown token.\nAllow DTD parsing.\nReturns an iterator over ancestor nodes starting at this …\nReturns a string slice.\nReturns element’s attribute value.\nReturns element’s attribute object.\nReturns element’s attributes.\nReturns an iterator over children nodes.\nReturns node’s default namespace URI.\nReturns an iterator over document’s descendant nodes.\nReturns an iterator over this node and its descendants.\nReturns node’s document.\nReturns the first child of this node.\nReturns an iterator over first children nodes starting at …\nReturns the first element child of this node.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new instance from static data.\nReturns the <code>u32</code> representation of the <code>NodeId</code>.\nReturns the node of the tree with the given NodeId.\nReturns the <code>usize</code> representation of the <code>NodeId</code>.\nChecks that element has a specified attribute.\nReturns true if this node has children.\nReturns true if this node has siblings.\nChecks that node has a specified tag name.\nReturns node’s NodeId\nReturns the input text of the original document.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks that node is a comment node.\nChecks that node is an element node.\nChecks that node is a processing instruction node.\nChecks that node is a root node.\nChecks that node is a text node.\nReturns the last child of this node.\nReturns an iterator over last children nodes starting at …\nReturns the last element child of this node.\nReturns an URI for a given prefix.\nReturns a prefix for a given namespace URI.\nReturns attribute’s name.\nReturns namespace name/prefix.\nReturns a local name.\nReturns attribute’s namespace URI.\nReturns a namespace URI.\nReturns element’s namespaces.\nConstructs a new <code>TextPos</code>.\nConstruct a new <code>NodeId</code> from a <code>u32</code>.\nCreates a new owned string from <code>&amp;str</code> or <code>String</code>.\nReturns the next sibling of this node.\nReturns the next sibling element of this node.\nReturns an iterator over next sibling nodes starting at …\nReturns node’s type.\nSets the maximum number of nodes to parse.\nReturns the parent of this node.\nReturns the parent element of this node.\nParses the input XML string.\nParses the input XML string using to selected options.\nReturns node as Processing Instruction.\nReturns the error position.\nReturns attribute’s position in bytes in the original …\nReturns the previous sibling of this node.\nReturns the previous sibling element of this node.\nReturns an iterator over previous sibling nodes starting …\nReturns node’s range in bytes in the original document.\nReturns the root node.\nReturns the root element of the document.\nReturns node’s tag name.\nReturns element’s tail text.\nReturns element’s tail text storage.\nReturns node’s text.\nCalculates <code>TextPos</code> in the original document from position …\nReturns node’s text storage.\nReturns namespace URI.\nReturns attribute’s value.\nReturns attribute’s value storage.\nA trait for approximate equality comparisons.\nApproxEqUlps is a trait for approximate equality …\nAn immutable, finite <code>f32</code>.\nAn immutable, finite <code>f64</code>.\nThis type type defines a margin within which two values …\nAn immutable, finite <code>f32</code> that is known to be &gt; 0.\nAn immutable, finite <code>f64</code> that is known to be &gt; 0.\nAn immutable, finite <code>f32</code> in a 0..=1 range.\nAn immutable, finite <code>f64</code> in a 0..=1 range.\nA <code>NormalizedF64</code> value initialized with one.\nAn immutable, finite <code>f32</code> that is known to be &gt;= 0.\nAn immutable, finite <code>f64</code> that is known to be &gt;= 0.\nA <code>PositiveF64</code> value initialized with zero.\nA <code>NormalizedF64</code> value initialized with zero.\nThis method tests that the <code>self</code> and <code>other</code> values are equal …\nThis method tests for <code>self</code> and <code>other</code> values to be …\nThis method tests that the <code>self</code> and <code>other</code> values are not …\nThis method tests for <code>self</code> and <code>other</code> values to be not …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the value as a primitive type.\nReturns the value as a primitive type.\nReturns the value as a primitive type.\nReturns the value as a primitive type.\nReturns the value as a <code>FiniteF64</code>.\nReturns the value as a <code>FiniteF64</code>.\nReturns the value as a <code>FiniteF64</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a finite <code>f64</code>.\nCreates a new <code>PositiveF64</code> if the given value is &gt;= 0.\nCreates a new <code>NonZeroPositiveF64</code> if the given value is &gt; 0.\nCreates a <code>NormalizedF64</code> if the given value is in a 0..=1 …\nCreates a <code>NormalizedF64</code> clamping the given value to a …\nCreates a <code>NormalizedF64</code> by dividing the given value by …\nCreates a <code>NormalizedF64</code> by dividing the given value by 255.\nCreates a finite <code>f64</code> without checking the value.\nCreates a new <code>PositiveF64</code> without checking the value.\nCreates a new <code>NonZeroPositiveF64</code> without checking the …\nCreates a new <code>NormalizedF64</code> without checking the value.\nThe next representable number above this one\nThe previous representable number below this one\nReturns the value as a <code>u16</code>.\nReturns the value as a <code>u8</code>.\nThe number of representable values or ULPs (Units of Least …\nJust a random, valid number.\nConnects outside edges.\nNo stroke extension.\nAn immutable, finite <code>f32</code>.\nA predefined 0.5 value.\nAn integer rectangle.\nAn integer size.\nDraws at the beginning and end of an open path contour.\nSpecifies how corners are drawn when a shape is stroked.\nExtends to miter limit, then switches to bevel.\nExtends to miter limit, then clips the corner.\nAn immutable, finite <code>f32</code> that is known to be &gt; 0.\nA rectangle defined by left, top, right and bottom edges.\nAn immutable, finite <code>f32</code> in a 0..=1 range.\nAn immutable <code>f32</code> that is larger than 0 but less then 1.\nA <code>NormalizedF32</code> value initialized with one.\nA Bezier path.\nA path builder.\nA path segment.\nA path segments iterator.\nA path stroker.\nA path verb.\nA point.\nA rectangle defined by left, top, right and bottom edges.\nAdds circle.\nAdds circle.\nCustom float to integer conversion routines.\nCustom float to integer rounding routines.\nFloat number extension methods.\nA size.\nAdds square.\nStroke properties.\nA stroke dashing properties.\nAn affine transformation matrix.\nA <code>NormalizedF32</code> value initialized with zero.\nReturns an absolute value.\nReturns rect’s bottom edge.\nReturns the bounds of the path’s points.\nClears the path and returns a <code>PathBuilder</code> that will reuse …\nReset the builder.\nCloses the current contour.\nComputes a resolution scale.\nCalculates path’s tight bounds.\nChecks that the rect is completely includes <code>other</code> Rect.\nReturns the cross product of vector and vec.\nAdds a cubic curve from the last point to <code>x</code>, <code>y</code>.\nReturns the current verb.\nConverts the current path into a dashed one.\nA stroke dashing properties.\nReturns width and height as a tuple.\nReturns the Euclidean distance from origin.\nReturns the dot product of two points.\nA pair of f32 numbers.\nFinishes the builder and returns a <code>Path</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>Path</code> from a circle.\nCreates a new <code>Point</code> from <code>f32x2</code>.\nCreates a new <code>IntRect</code>.\nCreates a new <code>Path</code> from an oval.\nCreates a new <code>Path</code> from <code>Rect</code>.\nCreates a new <code>IntSize</code> from width and height.\nCreates a new <code>Point</code>.\nCreates a new <code>IntRect</code>.\nReturns the value as a primitive type.\nReturns the value as a primitive type.\nReturns the value as a primitive type.\nReturns the value as a primitive type.\nReturns the value as a <code>FiniteF32</code>.\nReturns the value as a <code>FiniteF32</code>.\nReturns rect’s height.\nReturns height.\nInsets the rectangle.\nReturns an intersection of two rectangles.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn if the path is empty.\nChecks if the builder has any segments added.\nReturns true if both x and y are measurable values.\nReturns true if x and y are both zero.\nReturns the last point if any.\nReturns rect’s left edge.\nReturns the number of segments in the path.\nReturns the current number of segments in the builder.\nReturns the Euclidean distance from origin.\nA stroke line cap.\nA stroke line join.\nAdds a line from the last point.\nOutsets the rectangle.\nReturns a maximum value.\nReturns a maximum of both values.\nReturns a minimum value.\nThe limit at which a sharp corner is drawn beveled.\nAdds beginning of a contour.\nCreates a finite <code>f32</code>.\nCreates a new <code>NonZeroPositiveF32</code> if the given value is &gt; 0.\nCreates a <code>NormalizedF32</code> if the given value is in a 0..=1 …\nCreates a new stroke dashing object.\nCreates a new pair.\nCreates a <code>NormalizedF32Exclusive</code>.\nCreates a new builder.\nCreates a new PathStroker.\nCreates a <code>NormalizedF32Exclusive</code> clamping the given value.\nCreates a <code>NormalizedF32</code> clamping the given value to a …\nCreates a <code>NormalizedF64</code> by dividing the given value by …\nCreates a <code>NormalizedF32</code> by dividing the given value by 255.\nCreates a finite <code>f32</code> without checking the value.\nCreates a new <code>NonZeroPositiveF32</code> without checking the …\nCreates a new <code>NormalizedF32</code> without checking the value.\nReturns the next verb.\nScales (fX, fY) so that length() returns one, while …\nA collection of functions to work with Bezier paths.\nReturns an internal vector of points.\nAdds a circle contour.\nAdds an oval contour bounded by the provided rectangle.\nAdds a path.\nAdds a rectangle contour.\nAdds a quad curve from the last point to <code>x</code>, <code>y</code>.\nReturns rect’s right edge.\nReturn the closest integer for the given float.\nScales Point in-place by scale.\nScales current size by the specified factor.\nScales current size to the specified size.\nScales current size to the specified height.\nScales current size to the specified width.\nReturns an iterator over path’s segments.\nSets the auto closing mode. Off by default.\nScales vector so that distanceToOrigin() returns length, …\nSets vector to (x, y) scaled to length, if possible.\nSets vector to (x, y) scaled so length() returns one, and …\nReturns rect’s size.\nCreates a new pair from a single value.\nReturns a stoked path.\nStokes the path.\nConverts a <code>Point</code> into a <code>f32x2</code>.\nConverts into <code>IntRect</code> at the provided position.\nReturns the value as a <code>FiniteF32</code>.\nConverts into <code>Rect</code>.\nConverts into <code>Size</code>.\nReturns the value as a <code>u16</code>.\nReturns the value as a <code>u8</code>.\nReturns rect’s top edge.\nReturns a transformed in-place path.\nTranslates the rect by the specified offset.\nTranslates the rect to the specified position.\nReturns an internal vector of verbs.\nReturns rect’s width.\nReturns width.\nA stroke thickness.\nCreates a new builder with a specified capacity.\nReturns the first value.\nReturns rect’s X position.\nReturns the second value.\nReturns rect’s Y position.\nCreates a point at 0x0 position.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns object aligned position.\nConverts <code>viewBox</code> to <code>Transform</code>.")