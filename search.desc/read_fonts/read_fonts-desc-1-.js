searchState.loadedDescShard("read_fonts", 1, "Attempt to resolve <code>rsb_mapping_offset</code>.\nOffset in bytes from the start of this table to the …\nMajor version number of the horizontal metrics variations …\nPart of ChainedSequenceContextFormat2\nPart of ChainedSequenceContextFormat2\nChained Sequence Context Format 1\nChained Sequence Context Format 2\nChained Sequence Context Format 3\nPart of ChainedSequenceContextFormat1\nPart of ChainedSequenceContextFormat1\nfeatureParams for ‘cv01’-‘cv99’\nA Class Definition Table\nClass Definition Table Format 1\nClass Definition Table Format 2\nUsed in ClassDefFormat2\nPart of SequenceContextFormat2\nPart of SequenceContextFormat2\nCondition Table Format 1: Font Variation Axis Range\nConditionSet Table\nCoverage Format 1\nCoverage Format 2\nCoverage Table\nDevice delta formats\nDevice Table\nEither a Device table (in a non-variable font) or a …\nA trait that abstracts the behaviour of an extension …\nFeature Table\nFeature List Table\nAn enum for different possible tables referenced by …\nPart of FeatureList\nFeatureTableSubstitution Table\nUsed in FeatureTableSubstitution\nPart of FeatureVariations\nFeatureVariations Table\nIf set, skips over base glyphs\nIf set, skips over ligatures\nIf set, skips over all combining marks\nLanguage System Table\nSigned 2-bit value, 8 values per uint16\nSigned 4-bit value, 4 values per uint16\nSigned 8-bit value, 2 values per uint16\nLookup Table\nThe LookupFlag bit enumeration.\nLookup List Table\nThis bit relates only to the correct processing of GPOS …\nUsed in CoverageFormat2\nScript Table\nScript List Table\nScript Record\nSequence Context Format 1\nSequence Context Format 2\nSequence Context Format 3\nSequence Lookup Record\nPart of SequenceContextFormat1\nPart of SequenceContextFormat1\nan array of subtables, maybe behind extension lookups\nIf set, indicates that the lookup table structure is …\nVariation index table\nVariationIndex table, contains a delta-set index pair.\nOffset to an alternate feature table, from start of the …\nOffset to an alternate feature table, from start of the …\nIndex (zero-based) for the variation axis within the ‘…\nAttempt to resolve <code>backtrack_class_def_offset</code>.\nOffset to ClassDef table containing backtrack sequence …\nArray of offsets to coverage tables for the backtrack …\nA dynamically resolving wrapper for …\nNumber of glyphs in the backtrack sequence\nNumber of glyphs in the backtrack sequence\nNumber of glyphs in the backtrack sequence\nArray of backtrack glyph IDs\nArray of backtrack-sequence classes\nNumber of ChainedClassSequenceRule tables\nArray of offsets to ChainedClassSequenceRule tables, from …\nNumber of ChainedClassSequenceRuleSet tables\nArray of offsets to ChainedClassSequenceRuleSet tables, …\nA dynamically resolving wrapper for …\nA dynamically resolving wrapper for …\nNumber of ChainedSequenceRule tables\nArray of offsets to ChainedSequenceRule tables, from …\nNumber of ChainedSequenceRuleSet tables\nArray of offsets to ChainedSeqRuleSet tables, from …\nA dynamically resolving wrapper for …\nA dynamically resolving wrapper for …\nThe count of characters for which this feature provides …\nThe Unicode Scalar Value of the characters for which this …\nApplied to all glyphs in the range\nApplied to all glyphs in the range\nAttempt to resolve <code>class_def_offset</code>.\nOffset to ClassDef table, from beginning of …\nFormat identifier — format = 1\nFormat identifier — format = 2\nFormat identifier — format = 1\nNumber of ClassRangeRecords\nArray of ClassRangeRecords — ordered by startGlyphID\nNumber of ClassSequenceRule tables\nArray of offsets to ClassSequenceRule tables, from …\nNumber of ClassSequenceRuleSet tables\nArray of offsets to ClassSequenceRuleSet tables, from …\nA dynamically resolving wrapper for …\nA dynamically resolving wrapper for <code>class_seq_rule_offsets</code>.\nArray of Class Values — one per glyph ID\nNumber of conditions for this condition set.\nArray of offsets to condition tables, from beginning of the\nOffset to a condition set table, from beginning of …\nOffset to a condition set table, from beginning of …\nOffset to a condition set table, from beginning of …\nA dynamically resolving wrapper for <code>condition_offsets</code>.\nAttempt to resolve <code>coverage_offset</code>.\nAttempt to resolve <code>coverage_offset</code>.\nAttempt to resolve <code>coverage_offset</code>.\nAttempt to resolve <code>coverage_offset</code>.\nFormat identifier — format = 1\nFormat identifier — format = 2\nFormat identifier — format = 1\nOffset to Coverage table, from beginning of …\nOffset to Coverage table, from beginning of …\nOffset to Coverage table, from beginning of …\nOffset to Coverage table, from beginning of …\nArray of offsets to Coverage tables, from beginning of …\nA dynamically resolving wrapper for <code>coverage_offsets</code>.\nAttempt to resolve <code>default_lang_sys_offset</code>.\nOffset to default LangSys table, from beginning of Script …\nFormat of deltaValue array data: 0x0001, 0x0002, or 0x0003\nFormat, = 0x8000\nA delta-set inner index — used to select a delta-set row …\nA delta-set outer index — used to select an item …\nArray of compressed data\nThe first value represents the design size in 720/inch …\nReturn new, empty flags\nLast glyph ID in the range\nLast glyph ID in the range\nLast glyph ID in the range\nLast glyph ID in the range\nLargest size to correct, in ppem\nThe ‘name’ table name ID that specifies a string (or …\nThe ‘name’ table name ID that specifies a string (or …\nOffset to Feature table, from beginning of FeatureList\nNumber of FeatureRecords in this table\nThe feature table index to match.\nThe feature table index to match.\nNumber of feature index values for this language system —\nArray of indices into the FeatureList, in arbitrary order\nOffset to Feature table, from beginning of FeatureList\nOffset to Feature table, from beginning of FeatureList\nAttempt to resolve <code>feature_params_offset</code>.\nOffset from start of Feature table to FeatureParams table, …\nArray of FeatureRecords — zero-based (first feature has …\nOffset to a feature table substitution table, from …\nOffset to a feature table substitution table, from …\nOffset to a feature table substitution table, from …\n4-byte feature identification tag\n4-byte feature identification tag\nNumber of feature variation records.\nArray of feature variation records.\nMaximum value of the font variation instances that satisfy …\nMinimum value of the font variation instances that satisfy …\nThe first ‘name’ table name ID used to specify strings …\nFormat identifier: format = 1\nFormat identifier: format = 2\nFormat identifier: format = 3\nFormat identifier: format = 1\nFormat identifier: format = 2\nFormat identifier: format = 3\nFormat, = 1\nFormat number is set to 0.\nFormat identifier: format = 1\nFormat identifier: format = 1\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct a LookupFlag from a raw value, discarding …\nReturn the subtable at the given index\nIf this glyph is in the coverage table, returns its index\nIf this glyph is in the coverage table, returns its index\nGet the class for this glyph id\nGet the class for this glyph id\nIf this glyph is in the coverage table, returns its index\nGet the class for this glyph id\nArray of glyph IDs — in numerical order\nNumber of glyphs in the glyph array\nSize of the classValueArray\nNumber of glyphs in the input glyph sequence\nNumber of glyphs to be matched\nNumber of glyphs in the input sequence\nThe second value has no independent meaning, but serves as …\nIf set, skips over base glyphs\nIf set, skips over ligatures\nIf set, skips over all combining marks\nAttempt to resolve <code>input_class_def_offset</code>.\nOffset to ClassDef table containing input sequence context,\nArray of offsets to coverage tables for the input sequence\nA dynamically resolving wrapper for <code>input_coverage_offsets</code>.\nNumber of glyphs in the input sequence\nTotal number of glyphs in the input sequence\nNumber of glyphs in the input sequence\nArray of input glyph IDs—starting with the second glyph\nSequence of classes to be matched to the input glyph …\nArray of input glyph IDs—start with second glyph\nArray of input sequence classes, beginning with the second …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn an iterator over all the subtables in the collection\nIterate over each glyph and its class.\nIterate over each glyph and its class.\nIterate over the decoded values for this device\nIterate over each glyph and its class.\nOffset to LangSys table, from beginning of Script table\nNumber of LangSysRecords for this script — excluding the …\nOffset to LangSys table, from beginning of Script table\nOffset to LangSys table, from beginning of Script table\nArray of LangSysRecords, listed alphabetically by LangSys …\n4-byte LangSysTag identifier\n4-byte LangSysTag identifier\nThe number of subtables in this collection\nAttempt to resolve <code>lookahead_class_def_offset</code>.\nOffset to ClassDef table containing lookahead sequence …\nArray of offsets to coverage tables for the lookahead …\nA dynamically resolving wrapper for …\nNumber of glyphs in the lookahead sequence\nNumber of glyphs in the lookahead sequence\nNumber of glyphs in the lookahead sequence\nArray of lookahead glyph IDs\nArray of lookahead-sequence classes\nNumber of lookups in this table\nLookup qualifiers\nNumber of LookupList indices for this feature\nIndex (zero-based) into the LookupList\nIndex (zero-based) into the LookupList\nArray of indices into the LookupList — zero-based (first …\nArray of offsets to Lookup tables, from beginning of …\nDifferent enumerations for GSUB and GPOS\nA dynamically resolving wrapper for <code>lookup_offsets</code>.\nIf not zero, skips over all marks of attachment type …\nIndex (base 0) into GDEF mark glyph sets structure. This …\nThe third value enables applications to use a single name …\nCreate from a raw scalar.\nNumber of named parameters. (May be zero.)\nNumber of RangeRecords\nArray of glyph ranges — ordered by startGlyphID.\nThe fourth and fifth values represent the small end of the …\nA constructor that requires additional arguments.\nIndex of a feature required for this language system; if no\nThis bit relates only to the correct processing of the …\nThe ‘name’ table name ID that specifies sample text …\nOffset to Script table, from beginning of ScriptList\nNumber of ScriptRecords\nOffset to Script table, from beginning of ScriptList\nOffset to Script table, from beginning of ScriptList\nArray of ScriptRecords, listed alphabetically by script tag\n4-byte script tag identifier\n4-byte script tag identifier\nNumber of SequenceLookupRecords\nNumber of SequenceLookupRecords\nNumber of SequenceLookupRecords\nNumber of SequenceLookupRecords\nNumber of SequenceLookupRecords\nNumber of SequenceLookupRecords\nArray of Sequence lookup records\nArray of SequenceLookupRecords\nArray of SequenceLookupRecords\nArray of SequenceLookupRecords\nArray of SequenceLookupRecords\nArray of SequenceLookupRecords\nNumber of SequenceRule tables\nArray of offsets to SequenceRule tables, from beginning of …\nNumber of SequenceRuleSet tables\nArray of offsets to SequenceRuleSet tables, from beginning …\nA dynamically resolving wrapper for <code>seq_rule_set_offsets</code>.\nA dynamically resolving wrapper for <code>seq_rule_offsets</code>.\nIndex (zero-based) into the input glyph sequence\nIndex (zero-based) into the input glyph sequence\nIf set, skips over base glyphs\nIf set, skips over ligatures\nIf set, skips over all combining marks\nIf not zero, skips over all marks of attachment type …\nThis bit relates only to the correct processing of the …\nIf set, indicates that the lookup table structure is …\nCoverage Index of first glyph ID in range\nCoverage Index of first glyph ID in range\nFirst glyph ID of the classValueArray\nFirst glyph ID in the range\nFirst glyph ID in the range\nFirst glyph ID in the range\nFirst glyph ID in the range\nSmallest size to correct, in ppem\nNumber of subtables for this lookup\nNumber of feature table substitution records.\nArray of feature table substitution records.\nArray of offsets to lookup subtables, from beginning of …\nA dynamically resolving wrapper for <code>subtable_offsets</code>.\nRaw transmutation to u16.\nThe ‘name’ table name ID that specifies a string (or …\nIf set, indicates that the lookup table structure is …\nMajor &amp; minor version of the table: (1, 0)\nThe loca table.\nReturns the argument unchanged.\nAttempt to return the offset for a given glyph id.\nCalls <code>U::from(self)</code>.\n<code>maxp</code>\nMaximum levels of recursion; 1 for simple components.\nMaximum number of components referenced at “top level” …\nMaximum contours in a composite glyph.\nMaximum points in a composite glyph.\nMaximum contours in a non-composite glyph.\nNumber of FDEFs, equal to the highest function number + 1.\nNumber of IDEFs.\nMaximum points in a non-composite glyph.\nMaximum byte count for glyph instructions.\nMaximum stack depth across Font Program (‘fpgm’ …\nNumber of Storage Area locations.\nMaximum points used in Z0.\n1 if instructions do not use the twilight zone (Z0), or 2 …\nThe number of glyphs in the font.\nThe version: 0x00005000 for version 0.5, 0x00010000 for …\nThe MVAR (Metrics Variations) table\nValueRecord metrics variation record\nA delta-set inner index — used to select a delta-set row …\nA delta-set inner index — used to select a delta-set row …\nA delta-set outer index — used to select an item …\nA delta-set outer index — used to select an item …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAttempt to resolve <code>item_variation_store_offset</code>.\nOffset in bytes from the start of this table to the item …\nReturns the metric delta for the specified tag and …\nFour-byte tags used to represent particular metric or …\nThe number of value records — may be zero.\nThe size in bytes of each value record — must be greater …\nArray of value records that identify target items and the …\nFour-byte tag identifying a font-wide measure.\nFour-byte tag identifying a font-wide measure.\nMajor version number of the horizontal metrics variations …\nCap height.\nGaspRange[0]\nGaspRange[1]\nGaspRange[2]\nGaspRange[3]\nGaspRange[4]\nGaspRange[5]\nGaspRange[6]\nGaspRange[7]\nGaspRange[8]\nGaspRange[9]\nHorizontal ascender.\nHorizontal clipping ascent.\nHorizontal clipping descent.\nHorizontal caret offset.\nHorizontal caret run.\nHorizontal caret rise.\nHorizontal descender.\nHorizontal line gap.\nSubscript em x-offset.\nSubscript em x-size.\nSubscript em y-offset.\nSubscript em y-size.\nSuperscript em x-offset.\nSuperscript em x-size.\nSuperscript em y-offset.\nSuperscript em y-size.\nStrikeout offset.\nStrikeout size.\nUnderline offset.\nUnderline size.\nVertical ascender.\nVertical caret offset.\nVertical caret run.\nVertical caret rise.\nVertical descender.\nVertical line gap.\nX-height.\nCompatible full (Macintosh only).\nCopyright notice.\nAn iterator over the chars of a name record.\nDark background palette.\nDescription of the typeface.\nName of the designer of the typeface.\nURL of typeface designer (with protocol, e.g., http://, …\nThe encoding used by the name table.\nFont family name.\nFull font name that reflects all family and relevant …\nLicense description.\nURL where additional licensing information can be found.\nLight background palette.\nPart of Name\nManufacturer name.\nA helper for encoding and decoding Mac OS Roman encoded …\nNaming table version 1\nIdentifier for an informational string (or name).\nName Records\nEntry for a name in the naming table.\nPostScript CID findfont name.\nPostScript name for the font.\nSample text.\nFont subfamily name.\nTrademark; this is used to save any trademark …\nTypographic family name.\nTypographic subfamily name.\nUnique font identifier.\nVariations PostScript name prefix.\nURL of font vendor (with protocol, e.g., http://, ftp://).\nVersion string.\nWWS family name.\nWWS subfamily name.\nAn iterator over the <code>char</code>s in this name.\nNumber of name records.\nConvert from a mac-roman encoded byte to a <code>char</code>\nconvert from a char to a mac-roman encoded byte, if the …\nPlatform-specific encoding ID.\nPlatform-specific encoding ID.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn a type that can decode the string data for this …\nNumber of language-tag records.\nLanguage-tag string offset from start of storage area (in …\nLanguage-tag string offset from start of storage area (in …\nThe language-tag records where langTagCount is the number …\nLanguage ID.\nLanguage ID.\nLanguage-tag string length (in bytes)\nString length (in bytes).\nLanguage-tag string length (in bytes)\nString length (in bytes).\nName ID.\nName ID.\nThe name records where count is the number of records.\nCreate a new identifier from a raw u16 value.\nDetermine the coding from the platform and encoding id.\nPlatform ID.\nPlatform ID.\nReturns an iterator over the set of predefined identifiers …\nOffset to start of string storage (from start of table).\nReturn a type that can decode the string data for this …\nThe FontData containing the encoded name strings.\nString offset from start of storage area (in bytes).\nString offset from start of storage area (in bytes).\nReturn the memory representation of this identifier as a …\nReturn the identifier as a u16.\nTable version number (0 or 1)\nBit 5: Glyphs are emboldened.\nBit 0: Font contains italic or oblique glyphs, otherwise …\nBit 2: Glyphs have their foreground and background …\nBit 9: Font contains oblique glyphs.\nBit 3: Outline (hollow) glyphs, otherwise they are solid.\n<code>OS/2</code>\nBit 6: Glyphs are in the standard weight/style for the …\nBit 4: Glyphs are overstruck.\nOS/2 selection flags\nBit 1: Glyphs are underscored.\nBit 7: If set, it is strongly recommended that …\nBit 8: The font has ‘name’ table strings consistent …\nFont Vendor Identification.\nReturns the set containing all flags.\nReturns the intersection between the two sets of flags.\nDisables all flags disabled in the set.\nReturns the union of the two sets of flags.\nAdds the set of flags.\nReturns the raw value of the flags currently stored.\nReturns the left flags, but with all the right flags …\nToggles the set of flags.\nReturns <code>true</code> if all of the flags in <code>other</code> are contained …\nReturns the difference between the flags in <code>self</code> and <code>other</code>.\nReturns an empty set of flags.\nReturns the argument unchanged.\nConvert from underlying bit representation, unless that …\nConvert from underlying bit representation, dropping any …\nFont selection flags.\nType flags.\nInserts the specified flags in-place.\nReturns the intersection between the flags in <code>self</code> and …\nReturns <code>true</code> if there are flags common to both <code>self</code> and …\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if no flags are currently stored.\nReturns the complement of this set of flags.\nPANOSE classification number.\nRemoves the specified flags in-place.\nThis metric specifies the distance between the baseline …\nFont-family class and subclass. This parameter is a …\nThe typographic ascender for this font.\nThe typographic descender for this font.\nThe typographic line gap for this font.\nReturns the set difference of the two sets of flags.\nDisables all flags enabled in the set.\nThis metric specifies the distance between the baseline …\nToggles the specified flags in-place.\nCode page character range bits 0-31.\nCode page character range bits 32-63.\nUnicode Character Range.\nUnicode Character Range (bits 32-63).\nUnicode Character Range (bits 64-95).\nUnicode Character Range (bits 96-127).\nReturns the union of between the flags in <code>self</code> and <code>other</code>.\nhis is the Unicode code point, in UTF-16 encoding, of a …\nThis is the Unicode code point, in UTF-16 encoding, of a …\nThe minimum Unicode index (character code) in this font.\nThe maximum Unicode index (character code) in this font.\nThis field is used for fonts with multiple optical styles.\nThis field is used for fonts with multiple optical styles.\nThis field is used for fonts with multiple optical styles.\nWeight class.\nWidth class.\nThe “Windows ascender” metric.\nThe “Windows descender” metric.\nAverage weighted escapement.\nThe position of the top of the strikeout stroke relative …\nThickness of the strikeout stroke in font design units.\nThe recommended horizontal offset in font design units for …\nThe recommended horizontal size in font design units for …\nThe recommended vertical offset in font design units for …\nThe recommended vertical size in font design units for …\nThe recommended horizontal offset in font design units for …\nThe recommended horizontal size in font design units for …\nThe recommended vertical offset in font design units for …\nThe recommended vertical size in font design units for …\nThe 258 glyph names defined for Macintosh TrueType fonts\nA string in the post table.\npost (PostScript) table\nReturns the argument unchanged.\nArray of indices into the string data. See below for …\nCalls <code>U::from(self)</code>.\nSet to 0 if the font is proportionally spaced, non-zero if …\nItalic angle in counter-clockwise degrees from the …\nMaximum memory usage when an OpenType font is downloaded …\nMaximum memory usage when an OpenType font is downloaded.\nMinimum memory usage when an OpenType font is downloaded …\nMinimum memory usage when an OpenType font is downloaded.\nNumber of glyphs (this should be the same as numGlyphs in …\nThe number of glyph names covered by this table\nStorage for the string data.\nThis is the suggested distance of the top of the underline …\nSuggested values for the underline thickness. In general, …\n0x00010000 for version 1.0 0x00020000 for version 2.0 …\nState for processing the blend operator for DICTs and …\nErrors that are specific to PostScript processing.\nAssociates a glyph identifier with a Font DICT.\nFdSelect format 0.\nFdSelect format 3.\nFdSelect format 4.\nRange struct for FdSelect format 3.\nRange struct for FdSelect format 4.\nCommon type for uniform access to CFF and CFF2 index …\nAn array of variable-sized objects in a <code>CFF</code> table.\nAn array of variable-sized objects in a <code>CFF2</code> table.\nReference to a Latin-1 encoded string.\nEither a signed 32-bit integer or a 16.16 fixed point …\nThe PostScript standard string set.\nOperand stack for DICTs and charstrings.\nPostScript string identifier (SID).\nApply the <code>blend</code> operator.\nApply a prefix sum to decode delta-encoded numbers.\nReturns an iterator over the characters of the string.\nParsing for PostScript charstrings.\nReturns the number of objects in the index.\nNumber of objects stored in INDEX.\nNumber of objects stored in INDEX.\nArray containing the object data.\nArray containing the object data.\nParsing for PostScript DICTs.\nFD index for all glyphs in range.\nFD index for all glyphs in range.\nFD index for all glyphs in range.\nFD index for all glyphs in range.\nFD selector array (one entry for each glyph).\nFirst glyph index in range.\nFirst glyph index in range.\nFirst glyph index in range.\nFirst glyph index in range.\nReturns an array of <code>N</code> 16.16 fixed point values starting at …\nReturns an iterator yielding all elements on the stack as …\nReturns the associated font DICT index for the given glyph …\nFormat = 0.\nFormat = 3.\nFormat = 4.\nFormat = 0.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the data for the object at the given index.\nReturns the data for the object at the given index.\nReturns the data for the object at the given index.\nReturns the 16.16 fixed point value at the given index on …\nReturns the 32-bit integer at the given index on the stack.\nReturns the offset at the given index.\nReturns the offset of the object at the given index.\nReturns the offset of the object at the given index.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the number of elements on the stack is odd.\nNumber of ranges.\nNumber of ranges.\nCreates a new index from the given data.\nCreates an identifier from a 16-bit unsigned integer.\nCreates a new Latin-1 encoded string reference from the …\nReturns an iterator yielding all elements on the stack as …\nObject array element size.\nObject array element size.\nBytes containing <code>count + 1</code> offsets each of <code>off_size</code>.\nBytes containing <code>count + 1</code> offsets each of <code>off_size</code>.\nPops a 16.16 fixed point value from the top of the stack.\nPops a 32-bit integer from the top of stack.\nRange3 array.\nRange4 array.\nReturns the number of variation regions for the currently …\nReverse the order of all elements on the stack.\nReturns an iterator yielding scalars for each variation …\nSentinel GID. Set equal to the number of glyphs in the …\nSentinel GID. Set equal to the number of glyphs in the …\nSets the active variation store index.\nReturns the total size in bytes of the index table.\nReturns the total size in bytes of the index table.\nReturns the total size in bytes of the index table.\nResolves the identifier as a standard string.\nComputes a bias that is added to a subroutine operator in a\nReturns the underlying identifier as a 16-bit unsigned …\nTrait for processing commands resulting from charstring …\nMaximum nesting depth for subroutine calls.\nCommand sink that sends the results of charstring …\nBitmask defining the counter hints that should be made …\nEvaluates the given charstring and emits the resulting …\nReturns the argument unchanged.\nBitmask defining the hints that should be made active for …\nHorizontal stem hint at <code>y</code> with height <code>dy</code>.\nCalls <code>U::from(self)</code>.\nVertical stem hint at <code>x</code> with width <code>dx</code>.\nOperand for the <code>BlueValues</code>, <code>OtherBlues</code>, <code>FamilyBlues</code> and …\nPostScript DICT Operator with its associated operands.\nPostScript DICT operator.\nOperand for the <code>StemSnapH</code> and <code>StemSnapV</code> operators.\nEither a PostScript DICT operator or a (numeric) operand.\nGiven a byte slice containing DICT data, returns an …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGiven a byte slice containing DICT data, returns an …\nBit 0: Set to 1.\nBit 1: Draw outlines.\nGlyph data table\nSbix header flags.\nThe sbix (Standard Bitmap Graphics) table\nStrike header table\nReturns the set containing all flags.\nReturns the intersection between the two sets of flags.\nDisables all flags disabled in the set.\nReturns the union of the two sets of flags.\nAdds the set of flags.\nReturns the raw value of the flags currently stored.\nReturns the left flags, but with all the right flags …\nToggles the set of flags.\nReturns <code>true</code> if all of the flags in <code>other</code> are contained …\nThe actual embedded graphic data. The total length is …\nReturns the difference between the flags in <code>self</code> and <code>other</code>.\nReturns an empty set of flags.\nBit 0: Set to 1. Bit 1: Draw outlines. Bits 2 to 15: …\nReturns the argument unchanged.\nConvert from underlying bit representation, unless that …\nConvert from underlying bit representation, dropping any …\nOffset from the beginning of the strike data header to …\nIndicates the format of the embedded graphic data: one of …\nInserts the specified flags in-place.\nReturns the intersection between the flags in <code>self</code> and …\nReturns <code>true</code> if there are flags common to both <code>self</code> and …\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if no flags are currently stored.\nReturns the complement of this set of flags.\nNumber of bitmap strikes.\nThe horizontal (x-axis) position of the left edge of the …\nThe vertical (y-axis) position of the bottom edge of the …\nThe PPEM size for which this strike was designed.\nThe device pixel density (in PPI) for which this strike …\nA constructor that requires additional arguments.\nA constructor that requires additional arguments.\nRemoves the specified flags in-place.\nOffsets from the beginning of the ‘sbix’ table to data …\nA dynamically resolving wrapper for <code>strike_offsets</code>.\nReturns the set difference of the two sets of flags.\nDisables all flags enabled in the set.\nToggles the specified flags in-place.\nReturns the union of between the flags in <code>self</code> and <code>other</code>.\nTable version number — set to 1.\nAxis Records\nAxis Value Tables\nAn array of AxisValue tables.\nAxis value table format 1\nAxis value table format 2\nAxis value table format 3\nAxis value table format 4\nPart of AxisValueFormat4\nAxis value table flags.\nIf set, it indicates that the axis value represents the …\nIf set, this axis value table provides axis value …\nSTAT (Style Attributes Table)\nReturns the set containing all flags.\nThe total number of axes contributing to this axis-values …\nZero-base index into the axis record array identifying the …\nZero-base index into the axis record array identifying the …\nZero-base index into the axis record array identifying the …\nZero-base index into the axis record array identifying the …\nZero-base index into the axis record array identifying the …\nThe name ID for entries in the ‘name’ table that …\nThe name ID for entries in the ‘name’ table that …\nA value that applications can use to determine primary …\nA value that applications can use to determine primary …\nA tag identifying the axis of design variation.\nA tag identifying the axis of design variation.\nThe number of axis value tables.\nArray of offsets to axis value tables, in bytes from the …\nA dynamically resolving wrapper for <code>axis_value_offsets</code>.\nArray of AxisValue records that provide the combination of …\nReturns the intersection between the two sets of flags.\nDisables all flags disabled in the set.\nReturns the union of the two sets of flags.\nAdds the set of flags.\nReturns the raw value of the flags currently stored.\nReturns the left flags, but with all the right flags …\nToggles the set of flags.\nReturns <code>true</code> if all of the flags in <code>other</code> are contained …\nAttempt to resolve <code>design_axes_offset</code>.\nOffset in bytes from the beginning of the STAT table to the\nThe number of axis records. In a font with an ‘fvar’ …\nThe size in bytes of each axis record.\nReturns the difference between the flags in <code>self</code> and <code>other</code>.\nName ID used as fallback when projection of names into a …\nReturns an empty set of flags.\nFlags — see below for details.\nFlags — see below for details.\nFlags — see below for details.\nFlags — see below for details.\nFlags — see below for details.\nFormat identifier — set to 1.\nFormat identifier — set to 2.\nFormat identifier — set to 3.\nFormat identifier — set to 4.\nFormat identifier — set to 1.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from underlying bit representation, unless that …\nConvert from underlying bit representation, dropping any …\nInserts the specified flags in-place.\nReturns the intersection between the flags in <code>self</code> and …\nReturns <code>true</code> if there are flags common to both <code>self</code> and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if no flags are currently stored.\nThe numeric value for a style-linked mapping from this …\nA nominal numeric value for this attribute value.\nReturns the complement of this set of flags.\nOffset in bytes from the beginning of the STAT table to the\nAttempt to resolve <code>offset_to_axis_value_offsets</code>.\nThe maximum value for a range associated with the specified\nThe minimum value for a range associated with the specified\nA constructor that requires additional arguments.\nRemoves the specified flags in-place.\nReturns the set difference of the two sets of flags.\nDisables all flags enabled in the set.\nToggles the specified flags in-place.\nReturns the union of between the flags in <code>self</code> and <code>other</code>.\nA numeric value for this attribute value.\nA numeric value for this attribute value.\nA numeric value for this attribute value.\nA numeric value for this attribute value.\nThe name ID for entries in the ‘name’ table that …\nThe name ID for entries in the ‘name’ table that …\nThe name ID for entries in the ‘name’ table that …\nThe name ID for entries in the ‘name’ table that …\nThe name ID for entries in the ‘name’ table that …\nMajor/minor version number. Set to 1.2 for new fonts.\nMask for the low 12 bits to give the shared tuple records …\nImplements the logic for iterating over the individual runs\nOuter and inner indices for reading from an …\nThe DeltaSetIndexMap table\nThe DeltaSetIndexMap table format 0\nThe DeltaSetIndexMap table format 1\nFlag indicating that this tuple variation header includes …\nEntry format for a DeltaSetIndexMap.\nFloating point item delta computed by an item variation …\nTrait for applying floating point item deltas to target …\nMask for the low 4 bits, which give the count of bits …\nFlag indicating that this tuple variation table applies to …\nThe ItemVariationData subtable\nThe ItemVariationStore table\nMask for bits that indicate the size in bytes minus one of …\nFlag indicating that the serialized data for this tuple …\nPacked Deltas\nPacked “Point” Numbers\nAn iterator over the packed point numbers data.\nThe RegionAxisCoordinates record\nFlag indicating that some or all tuple variation tables …\nMask for the low 12 bits to give the shared tuple records …\nA Tuple Record\nTrait for deltas that are computed in a tuple variation …\nAn iterator over the deltas for a glyph.\nA single set of tuple variation data\nThe ‘tupleVariationCount’ field of the Tuple Variation …\nTupleVariationHeader\nA helper type for iterating over <code>TupleVariationHeader</code>s.\nAn iterator over the <code>TupleVariation</code>s for a specific glyph.\nThe VariationRegion record\nThe VariationRegionList table\nReturns an iterator over all of the pairs of (variation …\nReturns the set containing all flags.\nThe number of variation axes for this font. This must be …\nReturns the intersection between the two sets of flags.\nDisables all flags disabled in the set.\nReturns the union of the two sets of flags.\nAdds the set of flags.\nReturns the raw value of the flags currently stored.\nReturns the left flags, but with all the right flags …\nToggles the set of flags.\nComputes the delta value for the specified index and set …\nComputes the delta value in floating point for the …\nComputes a scalar value for this region and the specified …\nCompute the fixed point scalar for this tuple at the given …\nComputes a floating point scalar value for this region and …\nCompute the floating point scalar for this tuple at the …\nReturns <code>true</code> if all of the flags in <code>other</code> are contained …\nThe number of points in this set\nReturns an iterator over the per-region delta values for …\nDelta-set rows.\nIterate over the deltas for this tuple.\nReturns the difference between the flags in <code>self</code> and <code>other</code>.\n<code>true</code> if the header includes an embedded peak tuple.\nReturns an empty set of flags.\nThe region end coordinate value for the current axis.\nThe region end coordinate value for the current axis.\nA packed field that describes the compressed …\nA packed field that describes the compressed …\nA packed field that describes the compressed …\nDeltaSetIndexMap format: set to 0.\nDeltaSetIndexMap format: set to 1.\nFormat— set to 1\nDeltaSetIndexMap format: set to 0.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from underlying bit representation, unless that …\nConvert from underlying bit representation, dropping any …\nReturns the delta set index for the specified value.\nReturns true if this tuple provides deltas for all points …\nInner delta set index.\nInserts the specified flags in-place.\nIntermediate end tuple record for this tuple variation …\n<code>true</code> if the header includes the two intermediate region …\nIntermediate start tuple record for this tuple variation …\nReturns the intersection between the flags in <code>self</code> and …\nReturns <code>true</code> if there are flags common to both <code>self</code> and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if no flags are currently stored.\nReturns true if the delta is a point and requires reading …\nThe number of delta sets for distinct items.\nA dynamically resolving wrapper for …\nThe number of item variation data subtables.\nOffsets in bytes from the start of the item variation …\nIterate over the packed points\nThe number of mapping entries.\nThe number of mapping entries.\nThe delta-set index mapping data. See details below.\nThe delta-set index mapping data. See details below.\nThe delta-set index mapping data. See details below.\nCreates a new delta for the given position and …\nReturns the complement of this set of flags.\nOuter delta set index.\nReturns the ‘peak’ tuple for this variation\nThe region peak coordinate value for the current axis.\nThe region peak coordinate value for the current axis.\nPeak tuple record for this tuple variation table — …\n<code>true</code> if the data for this table includes packed point …\nA constructor that requires additional arguments.\nA constructor that requires additional arguments.\nA constructor that requires additional arguments.\nArray of region axis coordinates records, in the order of …\nArray of region axis coordinates records, in the order of …\nThe number of variation region tables in the variation …\nThe number of variation regions referenced.\nArray of indices into the variation region list for the …\nRemoves the specified flags in-place.\n<code>true</code> if any tables reference a shared set of point numbers\nread point numbers off the front of this data, returning …\nThe region start coordinate value for the current axis.\nThe region start coordinate value for the current axis.\nReturns the set difference of the two sets of flags.\nDisables all flags enabled in the set.\nToggles the specified flags in-place.\nA packed field. The high 4 bits are flags (see below). The …\nReturns the union of between the flags in <code>self</code> and <code>other</code>.\nCoordinate array specifying a position within the font’s …\nCoordinate array specifying a position within the font’s …\nThe size in bytes of the serialized data for this tuple …\nAttempt to resolve <code>variation_region_list_offset</code>.\nOffset in bytes from the start of the item variation store …\nArray of variation regions.\nA packed field: the high bit is a flag—see details below.\nThe vhea Vertical Header Table\nMaximum advance height value in ‘vmtx’ table.\nTypographic ascent.\nThe amount by which a slanted highlight on a glyph needs …\nUsed to calculate the slope of the cursor (rise/run); 1 for\n0 for vertical caret, 1 for horizontal.\nTypographic descent.\nTypographic line gap. Negative LineGap values are treated …\n0 for current format.\nMinimum bottom sidebearing value\nMinimum top sidebearing value in ‘vmtx’ table for …\nNumber of LongMetric entries in ‘hmtx’/‘vmtx’ table\nThe major/minor version (1, 1)\nDefined as max( tsb + (yMax-yMin)).\nThe vmtx (Vertical Metrics) table\nReturns the advance height for the given glyph identifier.\nA constructor that requires additional arguments.\nReturns the top side bearing for the given glyph identifer.\nTop side bearings for glyph IDs greater than or equal to …\nPaired advance height and top side bearing values for each …\nThe VVAR (Vertical Metrics Variations) table\nReturns the advance height delta for the specified glyph …\nAttempt to resolve <code>advance_height_mapping_offset</code>.\nOffset in bytes from the start of this table to the …\nReturns the bottom side bearing delta for the specified …\nAttempt to resolve <code>bsb_mapping_offset</code>.\nOffset in bytes from the start of this table to the …\nAttempt to resolve <code>item_variation_store_offset</code>.\nOffset in bytes from the start of this table to the item …\nReturns the top side bearing delta for the specified glyph …\nAttempt to resolve <code>tsb_mapping_offset</code>.\nOffset in bytes from the start of this table to the …\nReturns the vertical origin delta for the specified glyph …\nAttempt to resolve <code>v_org_mapping_offset</code>.\nOffset in bytes from the start of this table to the …\nMajor version number of the horizontal metrics variations …\nAn offset to an array.\nUsed in COLR/CPAL\nA generic field in a font table.\nTypes of fields in font tables.\nAny offset type.\nA struct created from a record and the data it needs to …\nAn offset, as well as the table it references.\nA generic trait for arrays.\nA generic trait for records, which need to be passed in …\nA generic table type.\nAn offset to string data.\nUsed in tables like name/post so we can actually print the …\nConvenience method for creating a <code>FieldType</code> from an array …\nmakes a field, handling the case where this array may not …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn the item at <code>idx</code>, or <code>None</code> if <code>idx</code> is out of bounds.\nAccess this table’s fields, in declaration order.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if this array is empty.\nReturns an iterator over this table’s fields.\nReturn an iterator over the contents of this array.\nThe length of the array.\nThe field’s name.\nCreate a new field with the given name and value.\nConvenience method for creating a <code>FieldType</code> for a resolved …\nThe raw offset\nConvenience method for creating a <code>FieldType</code> from an offset …\nConvenience method for creating a <code>FieldType</code> from an offset …\nThe parsed table pointed to by this offset, or an error if …\nReturn this offset as a u32.\nThe name of this table\nThe name of this type. For an array of u16s, this is <code>[u16]</code>.\nConvenience method for creating a <code>FieldType</code> from an …\nThe field’s value.")